var documenterSearchIndex = {"docs":
[{"location":"persistence.html#Reading/Writing-Curricula-and-Degree-Plans-1","page":"Reading/Writing Curricula & Degree Plans","title":"Reading/Writing Curricula & Degree Plans","text":"","category":"section"},{"location":"persistence.html#","page":"Reading/Writing Curricula & Degree Plans","title":"Reading/Writing Curricula & Degree Plans","text":"The ability to read/write curricula and degree plans to disk is greatly facilitated by using the functions described here.","category":"page"},{"location":"persistence.html#File-Format-1","page":"Reading/Writing Curricula & Degree Plans","title":"File Format","text":"","category":"section"},{"location":"persistence.html#","page":"Reading/Writing Curricula & Degree Plans","title":"Reading/Writing Curricula & Degree Plans","text":"The CSV file format stores data as comma-separated values in a text file, allowing data to be presented in tabular form. You can open CSV files with either a text editor or by using your favorite spreadsheet program. The sections below describe the CSV file formats used for curricula and degree plans, as well as functions that can be used to read/write these CSV files.","category":"page"},{"location":"persistence.html#Curricula-Files-1","page":"Reading/Writing Curricula & Degree Plans","title":"Curricula Files","text":"","category":"section"},{"location":"persistence.html#","page":"Reading/Writing Curricula & Degree Plans","title":"Reading/Writing Curricula & Degree Plans","text":"The CSV file format used to store curricula is shown below: (Image: file format for curricula) The elements shown in boldface are required keywords that must appear in the curriculum CSV file, while the italicized elements are user supplied arguments.  Notice that the italicized elements stipulate the input type, and whether or not the argument is required.","category":"page"},{"location":"persistence.html#","page":"Reading/Writing Curricula & Degree Plans","title":"Reading/Writing Curricula & Degree Plans","text":"More specifically, the data that is expected to follow each keyword provided in the curriculum CSV file is described next:","category":"page"},{"location":"persistence.html#","page":"Reading/Writing Curricula & Degree Plans","title":"Reading/Writing Curricula & Degree Plans","text":"Curriculum : the name of the curriculum/degree program (required).\nInstitution : the name of the institution offering the curriculum/degree program.\nDegree Type : the type of degree that will be earned by completing the curriculum. Allowable values are: AA, AS, AAS, BA, BS.\nSystem Type : the type of system the institution's operations on. Allowable values are: semester quarter\nCIP : the Classification of Instructional Programs (CIP) code for the curriculum. See: https://nces.ed.gov/ipeds/cipcode\nCourses : a keyword that appears on a line by itself (i.e., with no following data). A single header row should appear below this keyword, followed by the row-by-row list of courses associated with the curriculum. The required keywords in the header row, and the data that should appear below each header are as follows:\nCourse ID : the unique integer ID of the course (required).\nCourse Name : the name of the course (required).\nPrefix : the prefix associated with the course.\nNumber : the number associated with the course.\nPrerequisites : a (semicolon separated) list of all required prerequisites, by Course ID.\nCorequisites : a (semicolon separated) list of all required corequisites, by Course ID.\nStrict-Corequisites : a (semicolon separated) list of all required strict-corequisites, by Course ID.\nCredit Hours : the number of credit hours associated with the course (required).\nInstitution : the institution offering the course (may be different from the institution offering the curriculum).\nCanonical Name : the canonical (i.e., common) name used for the course.","category":"page"},{"location":"persistence.html#","page":"Reading/Writing Curricula & Degree Plans","title":"Reading/Writing Curricula & Degree Plans","text":"Below is an example curriculum file that uses the aforedescribed format: (Image: example file format for curricula) A link to this CSV file can be found here, and a visualization of this curriculum, created using the function described in Visualization Functions, is as follows: (Image: visualization of example curriculum)","category":"page"},{"location":"persistence.html#Degree-Plan-Files-1","page":"Reading/Writing Curricula & Degree Plans","title":"Degree Plan Files","text":"","category":"section"},{"location":"persistence.html#","page":"Reading/Writing Curricula & Degree Plans","title":"Reading/Writing Curricula & Degree Plans","text":"The CSV file format used to store degree plans is shown below: (Image: file format for curricula) The elements shown in boldface are required keywords that must appear in the degree plan CSV file, while the italicized elements are user supplied arguments.  Notice that the italicized elements stipulate the input type, and whether or not the argument is required.","category":"page"},{"location":"persistence.html#","page":"Reading/Writing Curricula & Degree Plans","title":"Reading/Writing Curricula & Degree Plans","text":"The data that is expected to follow each keyword provided in the degree plan CSV file is the same as those for curriculum CSV files above, with two additions:","category":"page"},{"location":"persistence.html#","page":"Reading/Writing Curricula & Degree Plans","title":"Reading/Writing Curricula & Degree Plans","text":"Degree Plan : the name of the degree plan (required).\nTerm : this keyword appears at the end of the header row associated with courses (required).  The term that a course should appear in as a part of a degree plan should be listed under this keyword.","category":"page"},{"location":"persistence.html#","page":"Reading/Writing Curricula & Degree Plans","title":"Reading/Writing Curricula & Degree Plans","text":"Below is an example degree plan file that uses the aforedescribed format. This degree plan satisfies the curriculum shown in the previous section, and it includes one additional prerequisite course. Notice that term information is also provided with each course. (Image: example file format for curricula) A link to this CSV file can be found here, and a visualization of this degree plan, created using the function described in Visualization Functions, is as follows: (Image: visualization of example degree plan)","category":"page"},{"location":"persistence.html#Writing-Curricula-and-Degree-Plans-1","page":"Reading/Writing Curricula & Degree Plans","title":"Writing Curricula and Degree Plans","text":"","category":"section"},{"location":"persistence.html#","page":"Reading/Writing Curricula & Degree Plans","title":"Reading/Writing Curricula & Degree Plans","text":"write_csv","category":"page"},{"location":"persistence.html#CurricularAnalytics.write_csv","page":"Reading/Writing Curricula & Degree Plans","title":"CurricularAnalytics.write_csv","text":"write_csv(c::Curriculum, file_path::AbstractString)\n\nWrite (i.e., serialize) a Curriculum data object to disk as a CSV file. To read  (i.e., deserialize) a curriculum CSV file, use the corresponding read_csv function. The file format used to store curricula is described in File Format.\n\nArguments\n\nc::Curriculum : the Curriculum data object to be serialized.\nfile_path::AbstractString : the absolute or relative path where the CSV file will be stored.\n\nExamples:\n\njulia> write_csv(c, \"./mydata/UBW_curric.csv\")\n\n\n\n\n\nwrite_csv(dp::DegreePlan, file_path::AbstractString)\n\nWrite (i.e., serialize) a DegreePlan data object to disk as a CSV file. To read  (i.e., deserialize) a degree plan CSV file, use the corresponding read_csv function. The file format used to store degree plans is described in File Format.\n\nArguments\n\ndp::DegreePlan : the DegreePlan data object to be serialized.\nfile_path::AbstractString : the absolute or relative path where the CSV file will be stored. \n\nExamples:\n\njulia> write_csv(dp, \"./mydata/UBW_plan.csv\")\n\n\n\n\n\n","category":"function"},{"location":"persistence.html#Reading-Curricula-and-Degree-Plans-1","page":"Reading/Writing Curricula & Degree Plans","title":"Reading Curricula and Degree Plans","text":"","category":"section"},{"location":"persistence.html#","page":"Reading/Writing Curricula & Degree Plans","title":"Reading/Writing Curricula & Degree Plans","text":"read_csv","category":"page"},{"location":"persistence.html#CurricularAnalytics.read_csv","page":"Reading/Writing Curricula & Degree Plans","title":"CurricularAnalytics.read_csv","text":"read_csv(file_path::AbstractString)\n\nRead (i.e., deserialize) a CSV file containing either a curriculum or a degree plan, and returns a corresponding Curriculum or DegreePlan data object.  The required format for curriculum or degree plan CSV files is  described in File Format.\n\nArguments\n\nfile_path::AbstractString : the relative or absolute path to the CSV file.\n\nExamples:\n\njulia> c = read_csv(\"./mydata/UBW_curric.csv\")\njulia> dp = read_csv(\"./mydata/UBW_plan.csv\")\n\n\n\n\n\n","category":"function"},{"location":"contributing.html#Contributor-Guide-1","page":"Contributing","title":"Contributor Guide","text":"","category":"section"},{"location":"contributing.html#","page":"Contributing","title":"Contributing","text":"We welcome all contributors and ask that you read these guidelines before starting to work on this project. Following these guidelines will facilitate collaboration and improve the speed at which your contributions gets merged.","category":"page"},{"location":"contributing.html#Bug-reports-1","page":"Contributing","title":"Bug reports","text":"","category":"section"},{"location":"contributing.html#","page":"Contributing","title":"Contributing","text":"If you encounter code in this toolbox that does not function properly please file a bug report. The report should be raised as a github issue with a minimal working example that reproduces the error message or erroneous result. The example should include any data needed, and if the issue is incorrectness, please post the correct result along with the incorrect result produced by the toolbox.","category":"page"},{"location":"contributing.html#","page":"Contributing","title":"Contributing","text":"Please include version numbers of all relevant libraries and Julia itself.","category":"page"},{"location":"install.html#Installation-1","page":"Installing the Toolbox","title":"Installation","text":"","category":"section"},{"location":"install.html#","page":"Installing the Toolbox","title":"Installing the Toolbox","text":"Installation is straightforward.  First, install the Julia programming language on your computer.  To do this, download Julia here: https://julialang.org, and follow the instructions for your operating system.","category":"page"},{"location":"install.html#","page":"Installing the Toolbox","title":"Installing the Toolbox","text":"Next, open the Julia application that you just installed. It should look similar to the image below. This interface is referred to as the Julia REPL.","category":"page"},{"location":"install.html#","page":"Installing the Toolbox","title":"Installing the Toolbox","text":"(Image: Julia termain)","category":"page"},{"location":"install.html#","page":"Installing the Toolbox","title":"Installing the Toolbox","text":"Next, enter Pkg mode from within Julia by hitting the ] key, and then type:","category":"page"},{"location":"install.html#","page":"Installing the Toolbox","title":"Installing the Toolbox","text":"  pkg> add CurricularAnalytics","category":"page"},{"location":"install.html#","page":"Installing the Toolbox","title":"Installing the Toolbox","text":"This will install the toolbox, along with the other Julia packages needed to run it. To load and use the toolbox, hit the backspace key to return to the Julia REPL. Now type:","category":"page"},{"location":"install.html#","page":"Installing the Toolbox","title":"Installing the Toolbox","text":"  julia> using CurricularAnalytics","category":"page"},{"location":"install.html#","page":"Installing the Toolbox","title":"Installing the Toolbox","text":"The toolbox must be loaded again via using CurricularAnalytics every time you restart Julia.","category":"page"},{"location":"install.html#Additional-Requirements-1","page":"Installing the Toolbox","title":"Additional Requirements","text":"","category":"section"},{"location":"install.html#","page":"Installing the Toolbox","title":"Installing the Toolbox","text":"If you plan to use the optimization capabilities built into the degree plan creation functions, you must install the Gurobi Optimizer. Gurobi is a commercial product, and requires a license key. However, academic licenses are available at no cost.","category":"page"},{"location":"install.html#","page":"Installing the Toolbox","title":"Installing the Toolbox","text":"After installing the Gurobi Solver you must run the following command in Pkg mode in the Julia REPL by hitting ], and then:","category":"page"},{"location":"install.html#","page":"Installing the Toolbox","title":"Installing the Toolbox","text":"  pkg> add Gurobi","category":"page"},{"location":"install.html#","page":"Installing the Toolbox","title":"Installing the Toolbox","text":"Back in the normal Julia REPL, which can be returned to from Pkg mode by hitting backspace, you must know run the following:","category":"page"},{"location":"install.html#","page":"Installing the Toolbox","title":"Installing the Toolbox","text":"  julia> using Gurobi","category":"page"},{"location":"install.html#","page":"Installing the Toolbox","title":"Installing the Toolbox","text":"This final command, using Gurobi, should be run every time you restart Julia. No further steps are necessary, and you may now utilize the optimization functionality of the toolbox.","category":"page"},{"location":"install.html#","page":"Installing the Toolbox","title":"Installing the Toolbox","text":"To load the toolbox and Gurobi at the same time you can run: ","category":"page"},{"location":"install.html#","page":"Installing the Toolbox","title":"Installing the Toolbox","text":"  julia> using CurricularAnalytics, Gurobi","category":"page"},{"location":"install.html#Windows-Specific-Steps-1","page":"Installing the Toolbox","title":"Windows Specific Steps","text":"","category":"section"},{"location":"install.html#","page":"Installing the Toolbox","title":"Installing the Toolbox","text":"If you are using Windows you must add the location of Julia to your PATH environment variable. To do this go to Control Panel -> System -> Advanced System Settings -> Environment Variables -> Path and click edit. Here you must append the file path of the Julia \\bin directory.","category":"page"},{"location":"install.html#","page":"Installing the Toolbox","title":"Installing the Toolbox","text":"If you are using Julia version 1.0.1 with default settings the path would be C:\\Users\\[YOUR USERNAME]\\AppData\\Local\\Julia-1.0.1\\bin","category":"page"},{"location":"install.html#Troubleshooting-1","page":"Installing the Toolbox","title":"Troubleshooting","text":"","category":"section"},{"location":"install.html#","page":"Installing the Toolbox","title":"Installing the Toolbox","text":"Following these steps should allow you to install and use the toolbox; however, in the event you experience an error of some type, please submit an issue by clicking this link and following these steps:","category":"page"},{"location":"install.html#","page":"Installing the Toolbox","title":"Installing the Toolbox","text":"Enter a short title that describes the issue you're experiencing.\nProvide any relevant logs and information in the larger comment section.\nClick the word labels to the right of the comment box and select the most relevant option.\nClick Submit new issue.","category":"page"},{"location":"graph_algs.html#Graph-Algorithms-1","page":"Graph Algorithms","title":"Graph Algorithms","text":"","category":"section"},{"location":"graph_algs.html#","page":"Graph Algorithms","title":"Graph Algorithms","text":"This toolbox makes use of a number of the graph algorithms provided in the LightGraphs package.  In addition, we have implemented a number of graph algorithms that you may find useful when developing analytics around curriculum graphs.  The functions implementing these algorithms are described next.","category":"page"},{"location":"graph_algs.html#","page":"Graph Algorithms","title":"Graph Algorithms","text":"dfs\ngad\nall_paths\nlongest_path\nreachable_from\nreachable_from_subgraph\nreachable_to\nreachable_to_subgraph\nreach\nreach_subgraph\ntopological_sort","category":"page"},{"location":"graph_algs.html#CurricularAnalytics.dfs","page":"Graph Algorithms","title":"CurricularAnalytics.dfs","text":"dfs(g)\n\nPerform a depth-first traversal of input graph g.\n\nArguments\n\nRequired:\n\ng::AbstractGraph : input graph.\n\nThis function returns the classification of each edge in graph g, as well as the order in which vertices are first discovered during a depth-first search traversal, and when the processing from that vertex is completed during the depth-first traverlsa.  According to the vertex discovery and finish times, each edge in g will be  classified as one of:\n\ntree edge : Any collection of edges in g that form a forest. Every vertex is either a single-vertex tree \n\nwith respect to such a collection, or is part of some larger tree through its connection to another vertex via a   tree edge. This collection is not unique defined on g.\n\nback edge : Given a collection of tree edges, back edges are those edges that connect some descendent vertex \n\nin a tree to an ancestor vertex in the same tree.\n\nforward edge : Given a collection of tree edges, forward edges are those that are incident from an ancestor \n\nin a tree, and incident to an descendent in the same tree.\n\ncross edge : Given a collection of tree edges, cross edges are those that are adjacent between vertices in \n\ntwo different trees, or between vertices in two different subtrees in the same tree.\n\njulia> edges, discover, finish = dfs(g)\n\n\n\n\n\n","category":"function"},{"location":"graph_algs.html#CurricularAnalytics.gad","page":"Graph Algorithms","title":"CurricularAnalytics.gad","text":"gad(g)\n\nReturns the transpose of directed acyclic graph (DAG) g, i.e., a DAG identical to g, except the direction of all edges is reversed.  If g is not a DAG, and error is thrown.\n\nArguments\n\nRequired:\n\ng::SimpleDiGraph : input graph.\n\n\n\n\n\n","category":"function"},{"location":"graph_algs.html#CurricularAnalytics.all_paths","page":"Graph Algorithms","title":"CurricularAnalytics.all_paths","text":"all_paths(g)\n\nEnumerate all of the unique paths in acyclic graph g, where a path in this case must include a   source vertex (a vertex with in-degree zero) and a different sink vertex (a vertex with out-degree   zero).  I.e., a path is this case must contain at least two vertices.  This function returns   an array of these paths, where each path consists of an array of vertex IDs.\n\nArguments\n\nRequired:\n\ng::AbstractGraph : acylic graph. \n\njulia> paths = all_paths(g)\n\n\n\n\n\n","category":"function"},{"location":"graph_algs.html#CurricularAnalytics.longest_path","page":"Graph Algorithms","title":"CurricularAnalytics.longest_path","text":"longest_path(g, s)\n\nThe longest path from vertx s to any other vertex in a acyclic graph g.  The longest path is not necessarily unique, i.e., there can be more than one longest path between two vertices.\n\nArguments\n\nRequired:\n\ng::AbstractGraph : acylic graph. \ns::Int : index of the source vertex in g. \n\njulia> path = longest_paths(g, s)\n\n\n\n\n\n","category":"function"},{"location":"graph_algs.html#CurricularAnalytics.reachable_from","page":"Graph Algorithms","title":"CurricularAnalytics.reachable_from","text":"reachable_from(g, s)\n\nReturns the the set of all vertices in g that are reachable from vertex s.\n\nArguments\n\nRequired:\n\ng::AbstractGraph : acylic input graph. \ns::Int : index of the source vertex in g.\n\n\n\n\n\n","category":"function"},{"location":"graph_algs.html#CurricularAnalytics.reachable_from_subgraph","page":"Graph Algorithms","title":"CurricularAnalytics.reachable_from_subgraph","text":"reachable_from_subgraph(g, s)\n\nReturns the subgraph induced by s in g (i.e., a graph object consisting of vertex  s and all vertices reachable from vertex s ing), as well as a vector mapping the vertex IDs in the subgraph to their IDs in the orginal graph g.\n\njulia-rep     sg, vmap = reachable_from_subgraph(g, s)`\n\n\n\n\n\n","category":"function"},{"location":"graph_algs.html#CurricularAnalytics.reachable_to","page":"Graph Algorithms","title":"CurricularAnalytics.reachable_to","text":"reachable_to(g, t)\n\nReturns the set of all vertices in g that can reach target vertex t through any path.\n\nArguments\n\nRequired:\n\ng::AbstractGraph : acylic input graph. \nt::Int : index of the target vertex in g. \n\n\n\n\n\n","category":"function"},{"location":"graph_algs.html#CurricularAnalytics.reachable_to_subgraph","page":"Graph Algorithms","title":"CurricularAnalytics.reachable_to_subgraph","text":"reachable_to_subgraph(g, t)\n\nReturns a subgraph in g consisting of vertex t and all vertices that can reach  vertex t ing, as well as a vector mapping the vertex IDs in the subgraph to their IDs  in the orginal graph g.\n\nArguments\n\nRequired:\n\ng::AbstractGraph : acylic graph. \nt::Int : index of the target vertex in g. \n\njulia-rep     sg, vmap = reachable_to(g, t)`\n\n\n\n\n\n","category":"function"},{"location":"graph_algs.html#CurricularAnalytics.reach","page":"Graph Algorithms","title":"CurricularAnalytics.reach","text":"reach(g, v)\n\nReturns the reach of vertex v in g, ie., the set of all vertices in g that can  reach vertex v and can be reached from v.\n\nArguments\n\nRequired:\n\ng::AbstractGraph : acylic graph. \nv::Int : index of a vertex in g. \n\n\n\n\n\n","category":"function"},{"location":"graph_algs.html#CurricularAnalytics.reach_subgraph","page":"Graph Algorithms","title":"CurricularAnalytics.reach_subgraph","text":"reach_subgraph(g, v)\n\nReturns a subgraph in g consisting of vertex v and all vertices that can reach v, as  well as all vertices that v can reach.  In addition, a vector is returned that maps the  vertex IDs in the subgraph to their IDs in the orginal graph g.\n\nArguments\n\nRequired:\n\ng::AbstractGraph : acylic graph. \nv::Int : index of a vertex in g. \n\njulia-rep     sg, vmap = reachable_to(g, v)`\n\n\n\n\n\n","category":"function"},{"location":"graph_algs.html#CurricularAnalytics.topological_sort","page":"Graph Algorithms","title":"CurricularAnalytics.topological_sort","text":"topological_sort(g; <keyword arguments>)\n\nPerform a topoloical sort on graph g, returning the weakly connected components of the graph, each in topological sort order. If the sort keyword agrument is supplied, the components will be sorted according to their size, in either ascending or  descending order.  If two or more components have the same size, the one with the smallest vertex ID in the first position of the  topological sort will appear first.\n\nArguments\n\nRequired:\n\ng::AbstractGraph : input graph.\n\nKeyword:\n\nsort::String : sort weakly connected components according to their size, allowable \n\nstrings: ascending, descending.\n\n\n\n\n\n","category":"function"},{"location":"visualize.html#Visualizing-Curricula-and-Degree-Plans-1","page":"Visualizing Curricula & Degree Plans","title":"Visualizing Curricula and Degree Plans","text":"","category":"section"},{"location":"visualize.html#","page":"Visualizing Curricula & Degree Plans","title":"Visualizing Curricula & Degree Plans","text":"In order to visualize curricula and degree plans, you must first install Blink.jl. For instructions on how to do this, see the Installation section.","category":"page"},{"location":"visualize.html#Visualization-Functions-1","page":"Visualizing Curricula & Degree Plans","title":"Visualization Functions","text":"","category":"section"},{"location":"visualize.html#","page":"Visualizing Curricula & Degree Plans","title":"Visualizing Curricula & Degree Plans","text":"visualize","category":"page"},{"location":"visualize.html#CurricularAnalytics.visualize","page":"Visualizing Curricula & Degree Plans","title":"CurricularAnalytics.visualize","text":" visualize(curriculum; <keyword arguments>))\n\nVisualize a curriculum. \n\nArguments\n\nRequired:\n\ncurriculum::Curriculum : the curriculum to visualize.\n\nKeyword:\n\nchanged : callback function argument, called whenever the curriculum is modified through the interface.    Default is nothing.\nnotebook : a Boolean argument, if set to true, Blink will not create a new window for the visualization, which allows it to be displayed in the output cell of a Jupyter notebook.\nedit : a Boolean argument, if set to true, the user may edit the curriculum through the visualziation interface.   Default is false.\noutput_file : the relative or absolute path to the CSV file that will store the edited curriculum. Default   is edited_curriculum.csv.\nshow_delay : a Boolean argument, if set to true, the delay factor metric will be displayed in the tooltip when hovering over a course. Default is false.\nshow_blocking : a Boolean argument, if set to true, the blocking factor metric will be displayed in the tooltip when hovering over a course. Default is false.\nshow_centrality : a Boolean argument, if set to true, the centrality metric will be displayed in the tooltip when hovering over a course. Default is false.\nshow_complexity : a Boolean argument, if set to true, the complexity metric will be displayed in the tooltip when hovering over a course. Default is false.\nscale : a Real value used to scale the size of the output window.\n\n\n\n\n\nvisualize(degree_plan; <keyword arguments>))\n\nVisualize a degree plan. \n\nArguments\n\nRequired:\n\ndegree_plan::DegreePlan : the degree plan to visualize.\n\nKeyword:\n\nchanged : callback function argument, called whenever the degree plan is modified through the interface.    Default is nothing.\nnotebook : a Boolean argument, if set to true, Blink will not create a new window for the visualization, which allows it to be displayed in the output cell of a Jupyter notebook.\nedit : a Boolean argument, if set to true, the user may edit the degree plan through the visualziation interface.   Default is false.\noutput_file : the relative or absolute path to the CSV file that will store the edited degree plan. Default   is edited_degree_plan.csv.\nshow_delay : a Boolean argument, if set to true, the delay factor metric will be displayed in the tooltip when hovering over a course. Default is true.\nshow_blocking : a Boolean argument, if set to true, the blocking factor metric will be displayed in the tooltip when hovering over a course. Default is true.\nshow_centrality : a Boolean argument, if set to true, the centrality metric will be displayed in the tooltip when hovering over a course. Default is true.\nshow_complexity : a Boolean argument, if set to true, the complexity metric will be displayed in the tooltip when hovering over a course. Default is true.\nscale : a Real value used to scale the size of the output window.\n\n\n\n\n\n","category":"function"},{"location":"visualize.html#Examples-1","page":"Visualizing Curricula & Degree Plans","title":"Examples","text":"","category":"section"},{"location":"visualize.html#","page":"Visualizing Curricula & Degree Plans","title":"Visualizing Curricula & Degree Plans","text":"An example curriculum for an electrical engineering program is provided in the examples directory of this toolbox.  To visualize this curriculum, execute the following commands:","category":"page"},{"location":"visualize.html#","page":"Visualizing Curricula & Degree Plans","title":"Visualizing Curricula & Degree Plans","text":"julia> curric = read_csv(\"./examples/UKY_EE_curric.csv\")\njulia> visualize(curric)","category":"page"},{"location":"visualize.html#","page":"Visualizing Curricula & Degree Plans","title":"Visualizing Curricula & Degree Plans","text":"This should produce the following window: (Image: UK EE curriculum)","category":"page"},{"location":"visualize.html#","page":"Visualizing Curricula & Degree Plans","title":"Visualizing Curricula & Degree Plans","text":"An example eight-term degree plan for the electrical engineering curriculum shown above is also provided in the examples directory of this toolbox. To visualize this degree plan, execute the following commands:","category":"page"},{"location":"visualize.html#","page":"Visualizing Curricula & Degree Plans","title":"Visualizing Curricula & Degree Plans","text":"julia> curric = read_csv(\"./examples/UKY_EE_plan.csv\")\njulia> visualize(dp)","category":"page"},{"location":"visualize.html#","page":"Visualizing Curricula & Degree Plans","title":"Visualizing Curricula & Degree Plans","text":"This should produce the following window: (Image: UK EE degree plan)","category":"page"},{"location":"visualize.html#","page":"Visualizing Curricula & Degree Plans","title":"Visualizing Curricula & Degree Plans","text":"In order to visualize the various metrics associated with this degree plan, simply hover your mouse over a course, as shown below: (Image: UK EE degree plan metrics)","category":"page"},{"location":"visualize.html#","page":"Visualizing Curricula & Degree Plans","title":"Visualizing Curricula & Degree Plans","text":"To learn more about the metrics displayed in this visualization, see the Metrics section.","category":"page"},{"location":"metrics.html#Metrics-1","page":"Metrics","title":"Metrics","text":"","category":"section"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"A number of predefined metrics for analyzing curricula and degree plans are described below. You may also define your own metrics for curricula and degree plans.  Each of these data types has a metrics dictionary where you may write these user-defined metrics.","category":"page"},{"location":"metrics.html#Curricular-Metrics-1","page":"Metrics","title":"Curricular Metrics","text":"","category":"section"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"CurricularAnalytics","category":"page"},{"location":"metrics.html#CurricularAnalytics","page":"Metrics","title":"CurricularAnalytics","text":"The curriculum-based metrics in this toolbox are based upon the graph structure of a  curriculum.  Specifically, assume curriculum c consists of n courses c_1 ldots c_n, and that there are m requisite (prerequisite or co-requsitie) relationships between these courses.   A curriculum graph G_c = (VE) is formed by creating a vertex set V = v_1 ldots v_n  (i.e., one vertex for each course) along with an edge set E = e_1 ldots e_m, where a  directed edge from vertex v_i to v_j is in E if course c_i is a requisite for course c_j.\n\n\n\n\n\n","category":"module"},{"location":"metrics.html#Blocking-Factor-1","page":"Metrics","title":"Blocking Factor","text":"","category":"section"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"The blocking factor is an important curriculum-based metric because it measures the extent to which one course blocks the ability to take other courses in the curriculum. That is, a course with a high blocking factor acts as a gateway to many other courses in the curriculum. Students who are unable to pass the gateway course will be blocked from taking many other courses in the curriculum.","category":"page"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"We define the blocking factor of a course v_i as the number of courses in the graph that are reachable from v_i. As examples of the blocking factor metric, conisder the two four-course curricula, with courses v_1 v_2 v_3 and v_4, shown below.  In part (a) of this figure, v_1 is a prerequisite for courses v_2 and v_3, and v_2 is a  prerequisite for course v_4, while in part (b), courses v_1 and v_2 are prerequisites for course v_3, and v_3 is a prerequisite for course v_4. The blocking factor of each course are shown inside of the course vertices in this figure.","category":"page"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"(Image: blocking factor example)","category":"page"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"blocking_factor","category":"page"},{"location":"metrics.html#CurricularAnalytics.blocking_factor","page":"Metrics","title":"CurricularAnalytics.blocking_factor","text":"blocking_factor(c::Curriculum, course::Int)\n\nThe blocking factor associated with course c_i in curriculum c with curriculum graph G_c = (VE) is defined as:\n\nb_c(v_i) = sum_v_j in V I(v_iv_j)\n\nwhere I(v_iv_j) is the indicator function, which is 1 if  v_i leadsto v_j,  and 0 otherwise. Here v_i leadsto v_j denotes that a directed path from vertex v_i to v_j exists in G_c, i.e., there is a requisite pathway from course  c_i to c_j in curriculum c.\n\n\n\n\n\nblocking_factor(c::Curriculum)\n\nThe blocking factor associated with curriculum c is defined as:\n\nb(G_c) = sum_v_i in V b_c(v_i)\n\nwhere G_c = (VE) is the curriculum graph associated with curriculum c.\n\n\n\n\n\n","category":"function"},{"location":"metrics.html#Delay-Factor-1","page":"Metrics","title":"Delay Factor","text":"","category":"section"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"Many curricula, particularly those in science, technology engineering and math (STEM) fields, contain a set of courses that must be completed in sequential order. The ability to successfully navigate these long pathways without delay is critical for student success and on-time graduation. If any course on the pathway is not completed on time, the student will then be delayed in completing the entire pathway by one term. The delay factor metric allows us to quanity this effect.","category":"page"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"We define the delay factor of course vertex v_i to be the length of the longest path that contains v_i. As an example of the delay factor metric, consider the same four-course curricula shown above. The delay factor of each course are shown inside of the course vertices in the figure below.","category":"page"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"(Image: delay factor example)","category":"page"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"delay_factor","category":"page"},{"location":"metrics.html#CurricularAnalytics.delay_factor","page":"Metrics","title":"CurricularAnalytics.delay_factor","text":"delay_factor(c::Curriculum, course::Int)\n\nThe delay factor associated with course c_k in curriculum c with curriculum graph G_c = (VE) is the number of vertices in the longest path  in G_c that passes through v_k. If (p) denotes the number of vertices in the directed path p in G_c, then we can define the delay factor of  course c_k as:\n\nd_c(v_k) = max_ijlmleft(v_i  oversetp_lleadsto v_k oversetp_mleadsto v_j)right\n\nwhere v_i oversetpleadsto v_j denotes a directed path p in G_c from vertex  v_i to v_j.\n\n\n\n\n\ndelay_factor(c::Curriculum)\n\nThe delay factor associated with curriculum c is defined as:\n\nd(G_c) = sum_v_k in V d_c(v_k)\n\nwhere G_c = (VE) is the curriculum graph associated with curriculum c.\n\n\n\n\n\n","category":"function"},{"location":"metrics.html#Centrality-1","page":"Metrics","title":"Centrality","text":"","category":"section"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"A course can be thought of as central to a curriculum if it requires a number of foundational courses as prerequisites, and the course itself serves as a prerequisite to many additional discipline-specific courses in the curriculum. The centrality metric is meant to capture this notion.","category":"page"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"We define the centrality of source and sink vertices to be 0.  For all other course vertices, consider all of the long paths (i.e., unique paths from a source to a sink) containing course vertex v_i.  The centrality of v_i is given by the sum of these path lengths. As an example of the centrality metric, consider the same four-course curricula shown above. The centrality factor of each course are shown inside of the vertices in the figure below.","category":"page"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"(Image: centrality example)","category":"page"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"In the case of the curriculum in part (a), there is one long path of length three that includes course v_2, hence its centrality is 3, while in part (b), there are two long paths of length three that include course v_2, hence its centrality is 6.","category":"page"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"centrality","category":"page"},{"location":"metrics.html#CurricularAnalytics.centrality","page":"Metrics","title":"CurricularAnalytics.centrality","text":"centrality(c::Curriculum, course::Int)\n\nConsider a curriculum graph G_c = (VE), and a vertex v_i in V. Furthermore,  consider all paths between every pair of vertices v_j v_k in V that satisfy the  following conditions:\n\nv_i v_j v_k are distinct, i.e., v_i neq v_j v_i neq v_k and v_j neq v_k;\nthere is a path from v_j to v_k that includes v_i, i.e., v_j leadsto v_i leadsto v_k;\nv_j has in-degree zero, i.e., v_j is a \"source\"; and\nv_k has out-degree zero, i.e., v_k is a \"sink\".\n\nLet P_v_i = p_1 p_2 ldots denote the set of all directed paths that satisfy these  conditions.  Then the centrality of v_i is defined as    \n\nq(v_i) = sum_l=1^left P_v_i right (p_l)\n\nwhere (p) denotes the number of vertices in the directed path p in G_c.\n\n\n\n\n\ncentrality(c::Curriculum)\n\nComputes the total centrality associated with all of the courses in curriculum c,  with curriculum graph G_c = (VE).  \n\nq(c) = sum_v in V q(v)\n\n\n\n\n\n","category":"function"},{"location":"metrics.html#Structural-Complexity-1","page":"Metrics","title":"Structural Complexity","text":"","category":"section"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"The curricular complexity of a course is meant to capture the impact of curricular structure on student progression. Through experimentation, we have found that a simple linear combination of the delay and blocking factors provides a good measure for quantifying the structural complexity of a curriculum.","category":"page"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"As an example of the structural complexity metric, consider the same four-course curricula shown above. The compleixty factor of each course, which is simply the sum of the course's delay and blocking factors, are shown inside of the course vertices in this figure.","category":"page"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"(Image: complexity example)","category":"page"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"complexity","category":"page"},{"location":"metrics.html#CurricularAnalytics.complexity","page":"Metrics","title":"CurricularAnalytics.complexity","text":"complexity(c::Curriculum, course::Int)\n\nThe complexity associated with course c_i in curriculum c with curriculum graph G_c = (VE) is defined as:\n\nh_c(v_i) = d_c(v_i) + b_c(v_i)\n\ni.e., as a linear combination of the course delay and blocking factors.\n\n\n\n\n\ncomplexity(c::Curriculum, course::Int)\n\nThe complexity associated with curriculum c with  curriculum graph G_c = (VE)  is defined as:\n\nh(G_c) = sum_v in V left(d_c(v) + b_c(v)right)\n\nFor the example curricula considered above, the curriculum in part (a) has an overall complexity of 15,  while the curriculum in part (b) has an overall complexity of 17. This indicates that the curriculum in part (b) will be slightly more difficult to complete than the one in part (a). In particular, notice that course v_1 in part (a) has the highest individual course complexity, but the combination of  courses v_1 and v_2 in part (b), which both must be passed before a student can attempt course v_3 in that curriculum, has a higher combined complexity.\n\n\n\n\n\n","category":"function"},{"location":"metrics.html#Basic-Metrics-(Curriculum)-1","page":"Metrics","title":"Basic Metrics (Curriculum)","text":"","category":"section"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"All of the predefined metrics for a given curriculum described above will be computed and stored in the curriculum's metric dictionary by using the following function.","category":"page"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"basic_metrics(::Curriculum)","category":"page"},{"location":"metrics.html#CurricularAnalytics.basic_metrics-Tuple{Curriculum}","page":"Metrics","title":"CurricularAnalytics.basic_metrics","text":"basic_metrics(c::Curriculum)\n\nCompute the basic metrics associated with curriculum c, and return an IO buffer containing these metrics.  The basic  metrics are also stored in the metrics dictionary associated with the curriculum. \n\nThe basic metrics computed include:\n\nnumber of credit hours : The total number of credit hours in the curriculum.\nnumber of courses : The total courses in the curriculum.\nblocking factor : The blocking factor of the entire curriculum, and of each course in the curriculum.\ncentrality : The centrality measure associated with the entire curriculum, and of each course in the curriculum.\ndelay factor : The delay factor of the entire curriculum, and of each course in the curriculum.\ncurricular complexity : The curricular complexity of the entire curriculum, and of each course in the curriculum.\n\nComplete descriptions of these metrics are provided above.\n\njulia> metrics = basic_metrics(curriculum)\njulia> println(String(take!(metrics)))\njulia> # The metrics are also stored in a dictonary that can be accessed as follows\njulia> curriculum.metrics\n\n\n\n\n\n","category":"method"},{"location":"metrics.html#Degree-Plan-Metrics-1","page":"Metrics","title":"Degree Plan Metrics","text":"","category":"section"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"The aforementioned curricular complexity metrics are independent of how a curriculum is layed out as a degree plan.  That is, the curricular metrics will not change as different degree plans are created.  Degree plan metrics are related to the manner in which courses in the curriculum are laid out across the terms in the degree plan.  These metrics are used in the creation of optimal degree plans as described in Optimized Degree Plans.","category":"page"},{"location":"metrics.html#Basic-Metrics-(Degree-Plans)-1","page":"Metrics","title":"Basic Metrics (Degree Plans)","text":"","category":"section"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"A set of basic statistics associated with the distribution of credit hours in a degree plan can be obtained by using:","category":"page"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"basic_metrics(::DegreePlan)","category":"page"},{"location":"metrics.html#CurricularAnalytics.basic_metrics-Tuple{DegreePlan}","page":"Metrics","title":"CurricularAnalytics.basic_metrics","text":"basic_metrics(plan)\n\nCompute the basic metrics associated with degree plan plan, and return an IO buffer containing these metrics.  The baseic  metrics are primarily concerned with how credits hours are distributed across the terms in a plan.  The basic metrics are  also stored in the metrics dictionary associated with the degree plan.\n\nArguments\n\nRequired:\n\nplan::DegreePlan : a valid degree plan (see Degree Plans). \n\nThe basic metrics computed include:\n\nnumber of terms : The total number of terms (semesters or quarters) in the degree plan, m.\ntotal credit hours : The total number of credit hours in the degree plan.\nmax. credits in a term : The maximum number of credit hours in any one term in the degree plan.\nmin. credits in a term : The minimum number of credit hours in any one term in the degree plan.\nmax. credit term : The earliest term in the degree plan that has the maximum number of credit hours.\nmin. credit term : The earliest term in the degree plan that has the minimum number of credit hours.\navg. credits per term : The average number of credit hours per term in the degree plan, overlinech.\nterm credit hour std. dev. : The standard deviation of credit hours across all terms sigma.  If ch_i denotes the number   of credit hours in term i, then\n\nsigma = sqrtsum_i=1^m (ch_i - overlinech)^2 over m\n\nTo view the basic degree plan metrics associated with degree plan plan in the Julia console use:\n\njulia> metrics = basic_metrics(plan)\njulia> println(String(take!(metrics)))\njulia> # The metrics are also stored in a dictonary that can be accessed as follows\njulia> plan.metrics\n\n\n\n\n\n","category":"method"},{"location":"metrics.html#Requisite-Distance-1","page":"Metrics","title":"Requisite Distance","text":"","category":"section"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"A degree plan metric that is based upon the separation of courses and their pre- and co-requisites in a degree plan is described next.","category":"page"},{"location":"metrics.html#","page":"Metrics","title":"Metrics","text":"requisite_distance","category":"page"},{"location":"metrics.html#CurricularAnalytics.requisite_distance","page":"Metrics","title":"CurricularAnalytics.requisite_distance","text":"requisite_distance(DegreePlan, course::Int)\n\nFor a given degree plan plan and course course, this function computes the total distance between course and  each of its requisites.  \n\nArguments\n\nRequired:\n\nplan::DegreePlan : a valid degree plan (see Degree Plans).\ncourse::Int : the vertex ID of a course in the curriclum graph plan.curriculum.graph.\n\nThe distance between a course a requisite is given by the number of terms that separate  the course from its requisite in the degree plan.  If we let T_i^p denote the term in degree plan p that course c_i  appears in, then for a degree plan with underlying curriculum graph G_c = (VE), the requisite distance for course  c_i in degree plan p, denoted rd_v_i^p, is:\n\nrd_v_i^p = sum(v_i v_j) in E (T_i - T_j)\n\nIn general, it is desirable for a course and its requisites to appear as close together as possible in a degree plan. The requisite distance metric computed by this function will be stored in the associated Course data object.\n\n\n\n\n\nrequisite_distance(plan::DegreePlan)\n\nFor a given degree plan plan, this function computes the total distance between all courses in the degree plan, and  the requisites for those courses.  \n\nArguments\n\nRequired:\n\nplan::DegreePlan : a valid degree plan (see Degree Plans).   \n\nThe distance between a course a requisite is given by the number of terms that separate the course from  its requisite in the degree plan.  If rd_v_i^p denotes the requisite distance between course  c_i and its requisites in degree plan p, then the total requisite distance for a degree plan,  denoted rd^p, is given by:\n\nrd^p = sum_v_i in V = rd_v_i^p\n\nIn general, it is desirable for a course and its requisites to appear as close together as possible in a degree plan.   Thus, a degree plan that minimizes these distances is desirable.  A optimization function that minimizes requisite  distances across all courses in a degree plan is described in [Optimized Degree Plans]@ref. The requisite distance metric computed by this function will be stored in the associated DegreePlan data object.\n\n\n\n\n\n","category":"function"},{"location":"simulating.html#Simulating-Student-Flows-1","page":"Simulating Student Flows","title":"Simulating Student Flows","text":"","category":"section"},{"location":"simulating.html#","page":"Simulating Student Flows","title":"Simulating Student Flows","text":"... Coming soon ...","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"                GNU AFFERO GENERAL PUBLIC LICENSE\n                   Version 3, 19 November 2007","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/  Everyone is permitted to copy and distribute verbatim copies  of this license document, but changing it is not allowed.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"                        Preamble","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"The licenses for most software and other practical works are designed to take away your freedom to share and change the works.  By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program–to make sure it remains free software for all its users.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"When we speak of free software, we are referring to freedom, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate.  Many developers of free software are heartened and encouraged by the resulting cooperation.  However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community.  It requires the operator of a network server to provide the source code of the modified version running there to the users of that server.  Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals.  This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"The precise terms and conditions for copying, distribution and modification follow.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"                   TERMS AND CONDITIONS","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Definitions.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"\"This License\" refers to version 3 of the GNU Affero General Public License.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"\"The Program\" refers to any copyrightable work licensed under this License.  Each licensee is addressed as \"you\".  \"Licensees\" and \"recipients\" may be individuals or organizations.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy.  The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"A \"covered work\" means either the unmodified Program or a work based on the Program.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy.  Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies.  Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License.  If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Source Code.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"The \"source code\" for a work means the preferred form of the work for making modifications to it.  \"Object code\" means any non-source form of a work.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form.  A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities.  However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work.  For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"The Corresponding Source for a work in source code form is that same work.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Basic Permissions.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met.  This License explicitly affirms your unlimited permission to run the unmodified Program.  The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work.  This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force.  You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright.  Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Conveying under any other circumstances is permitted solely under the conditions stated below.  Sublicensing is not allowed; section 10 makes it unnecessary.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Protecting Users' Legal Rights From Anti-Circumvention Law.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Conveying Verbatim Copies.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Conveying Modified Source Versions.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"a) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit.  Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Conveying Non-Source Forms.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"a) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling.  In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage.  For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product.  A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source.  The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information.  But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed.  Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Additional Terms.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law.  If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it.  (Additional permissions may be written to require their own removal in certain cases when you modify the work.)  You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"a) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10.  If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term.  If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Termination.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"You may not propagate or modify a covered work except as expressly provided under this License.  Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License.  If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Acceptance Not Required for Having Copies.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"You are not required to accept this License in order to receive or run a copy of the Program.  Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance.  However, nothing other than this License grants you permission to propagate or modify any covered work.  These actions infringe copyright if you do not accept this License.  Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Automatic Licensing of Downstream Recipients.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License.  You are not responsible for enforcing compliance by third parties with this License.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations.  If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License.  For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Patents.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based.  The work thus licensed is called the contributor's \"contributor version\".","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version.  For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement).  To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients.  \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License.  You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"No Surrender of Others' Freedom.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all.  For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Remote Network Interaction; Use with the GNU General Public License.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software.  This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work.  The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Revised Versions of this License.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Each version is given a distinguishing version number.  If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation.  If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Later license versions may give you additional or different permissions.  However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Disclaimer of Warranty.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Limitation of Liability.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Interpretation of Sections 15 and 16.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"To do so, attach the following notices to the program.  It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"Also add information on how to contact you by electronic and paper mail.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source.  For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code.  There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements.","category":"page"},{"location":"license.html#","page":"License Information","title":"License Information","text":"You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/.","category":"page"},{"location":"degreeplans.html#Creating-Degree-Plans-1","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"","category":"section"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"As mentioned previously, many different degree plans can be created for a given curriculum.  A curriculum is a collection of courses containing requisite relationships between them (see Terminology), while a degree plan adds a temporal element to a curriculum.  Specifically, a degree plan orders the courses in a curriculum into a collection of successive terms: Term 1, Term 2, etc., where a term is considered an academic period (e.g., semester or quarter).  Thus, students following a particular degree plan are expected to complete all of the courses in the first term during the first semester, all of the courses in the second term during the second semester, etc.  The important concept is that if a student completes their degree plan they will earn the degree associated with the curriculum.","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"Given that we can create many different degree plans for a curriculum, we are interested in finding those plans that best suit the needs and backgrounds of particular students.  For instance, a transfer student with existing college credits will require a different degree plan than a new student who has no prior college credit.  Similarly, a student may not have the background necessary to take the first math course in a curriculum, necessitating the addition of a prerequisite math class as a part of that student's degree plan, etc.","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"Below we describe a number of different techniques for creating degree plans.  In Basic Degree Plans we describe some simple techniques that can be used to create degree plans that are minimally feasible (feasible degree plans are defined below).","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"The methods decribed in Optimized Degree Plans are more sophisticated, and make use of optimization techniques that allow you to build in more constraints and objectives as a part of the degree plan construction process.  ","category":"page"},{"location":"degreeplans.html#Basic-Degree-Plans-1","page":"Creating Degree Plans","title":"Basic Degree Plans","text":"","category":"section"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"In order to be considered minimally feasible, a degree plan P for a curriculum C must satisfy two conditions:","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"Every course in the curriculum C must appear in one and only one term in the degree plan P.  (Note: P may contain courses that are not in C.)\nThe requisite relationships between the courses in P must be respected across the terms in P.  That is, if course a is a prerequisite for course b in the curriculum, then course a must appear in the degree plan P in an earlier term than course b.","category":"page"},{"location":"degreeplans.html#Optimized-Degree-Plans-1","page":"Creating Degree Plans","title":"Optimized Degree Plans","text":"","category":"section"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"The Curricular Analytics Toolbox also allows you to create customized degree plans according to various user-specifed criteria.  These features make use of the JuMP domain-specific language for specifying optimization problems in Julia, and calls the Gurobi solver in order to solve the optimzaton problems.  In order to use these features you must first install JuMP and Gurobi.  For installation instructions see Additional Requirements in the Installation section.","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"A brief overview of how we have structured the degree plan creation process as an optimzation problem is provided next.  Assume a curriculum consisting of n courses is organized over m terms. The degree plan creation process involves a partitioning of the n courses in a curriculum into m disjoint sets. Thus, we can represent a degree plan an n times m binary-valued assignment matrix x, where","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"  x_ij = left\n  beginarrayll\n  1  textif course i is assigned to term j in the plan \n  0  textotherwise\n  endarrayright","category":"page"},{"location":"degreeplans.html#Constraints-1","page":"Creating Degree Plans","title":"Constraints","text":"","category":"section"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"The two conditions required for a degree plan to be minimally feasible can be expressed in terms of these assignment variables in the form of constraints.  The first, which requires that each course be assigned to one and only one term, is:","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"  mboxConstraint 1   sum_j=1^m  x_ij = 1     i = 1 ldots n","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"If we let T_i denote the term that course i is assigned to, i.e., T_i = j iff x_ij = 1, then the second condition, which requires the assignment to satisfy all requisites, yeilds three constraints depending upon the requisite type.  That is, if course a is a requisite for course b, then:","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"  mboxConstraint 2 (prerequisite)   T_a    T_b \n  mboxConstraint 3 (co-requisite)   T_a  leq  T_b \n  mboxConstraint 4 (strict co-requisite)   T_a  =  T_b ","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"Note that T_i can be obtained from the assignment matrix using:","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":" T_i = sum_j=1^m j cdot x_ij ","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"In order to guide the optimzation algorithms towards reasonable soluations, additional constraints are required.  In partciular, it is necessarey to specify the maximum number of terms you would like the degree plan to contain, denoted alpha, as well as the minimum and maximum  number of credit hours allowed in each term, denoted beta and gamma respectively. If we let c_i denote the number of credit hours associated with course i, and theta_j the number of credit hours in term j, then","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":" theta_j = sum_i=1^n c_i cdot x_ij     j = 1 ldots m","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"and the aforementioned conditions may be expressed as the following constraints:","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"  mboxConstraint 5   m    alpha  \n  mboxConstraint 6  theta_j  ge  beta     j = 1 ldots m \n  mboxConstraint 7  theta_j  leq  gamma     j = 1 ldots m","category":"page"},{"location":"degreeplans.html#Objective-Functions-1","page":"Creating Degree Plans","title":"Objective Functions","text":"","category":"section"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"A number of different objective functions have been defined for use in creating degree plans optimized around particular criteria.  Furthemore, this toolbox supports a multi-objetive framework, allowing more than one of these objective functions to be simultaneously applied while creating degree plans.  ","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"For a single objective function f(x), the optimzation problem can be stated as:","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"min f(x) \nmboxsubject to Constraints   1-7","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"For multiple objective functions f_1(x) f(_2(x) ldots  the mulit-objective optimzation problem can be stated as:","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"min left f_1(x)  f_2(x) ldots right \nmboxsubject to Constraints   1-7","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"The currently supported objective functions are described next.","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"Balanced curriculum objective.  The goal of this objective function is to create degree plans that have roughly the same number of credit hours in every term.  This can be expressed as:","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"f(x) = min left( sum_i=1^m sum_j=1^m leftvert theta_i(x) - theta_j(x)rightvert right)","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"which may be rewritten as a linear objective function so that integer linear programming may be applied.","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"Requisite distance objective.  The goal of this objective function is to create degree plans where the pre- and co-requisites for every course c in a curriculum appears as close as possible to the term in which c appears in the degree plan.  Consider a curriculum graph G = (VE).  The objective function can then be expressed as:","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"  f(x) = minleft( leftvert T_j(x) - T_i(x) rightvert right)    forall e = (ij) in E","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"which may be rewritten as a linear objective function so that integer linear programming may be applied.","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"Toxic course combination avoidance objective.  For some students, it is the case that certain courses have a toxic impact on other courses in the curriculum if they are taken together in the same term.  That is, course a has a toxic impact on course b if a student is less likely to pass course b if it is taken in the same term as course a.  The goal of this objective function is to schedule courses so that toxic course combinations do not appear in the same term in the degree plan.","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"Let -1 leq aleph_ij leq 1 denote the toxic impact that course i has on course j if they are taken together in the same term.  (Note: negative values of aleph_ij actually indicate that course i has a synergistic impact on course j.) A quadratic objective function for toxic course avoidance can then be expressed as:","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"f(x) = min left( sum_t=1^m sum_i=1^n sum_j=1^n  aleph_ij cdot x_it cdot x_jt right)","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"The optimize_plan function in the toolbox implements the optimziation problems described above.","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"optimize_plan(c::Curriculum, term_count::Int, min_cpt::Int, max_cpt::Int, obj_order::Array{String, 1}; diff_max_cpt::Array{UInt, 1}, fix_courses::Dict, consec_courses::Dict, term_range::Dict, prior_courses::Array{Term, 1})","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"Using the curriculum c supplied as input, returns a degree plan optimzed according to the various  optimization criteria that have been specified as well as the objective functions that have been selected.","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"If an optimzied plan cannot be constructed (i.e., the constraints are such that an optimal solution is infeasible), nothing is returned, and the solver returns a message indicating that the problems is infeasible.  In these cases, you may wish to experiment with the constraint values.","category":"page"},{"location":"degreeplans.html#Arguments-1","page":"Creating Degree Plans","title":"Arguments","text":"","category":"section"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"Required: ","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"curric::Curriculum : the curriculum the degree plan will be created from.\nterm_count::Int : the maximum number of terms in the degree plan.\nmin_cpt::Int : the minimum number of credits allowed in each term.\nmax_cpt::Int: the minimum number of credits allowed in each term.\nobj_order::Array{String, 1} : the order in which the objective functions shoud be evaluated.  Allowable strings are:\nBalance : the balanced curriculum objective described above.\nPrereq : the requisite distnace objective described above.\nToxicity : the toxic course avoidance objective described above.","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"Keyword:","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"diff_max_cpt::Array{UInt, 1} :  specify particular terms that may deviate from the max_cpt specified previously.\nfix_courses::Dict(Int, Int) : specify courses that should be assigned to particular terms in (course_id, term)    format.\nconsec_courses::Dict(Int, Int): specify pairs of courses that should appear in consecutive terms in (course_id, course_id) format.\nterm_range::Dict(Int, (Int, Int)) : specify courses that should in a particular range of terms in (course_id, (low_range, high_range)) format.\nprior_courses::Array{Term, 1} : specify courses that were already completed in prior terms.","category":"page"},{"location":"degreeplans.html#Examples:-1","page":"Creating Degree Plans","title":"Examples:","text":"","category":"section"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"julia> curric = read_csv(\"path/to/curric.csv\")\njulia> dp = optimize_plan(curric, 8, 6, 18, [\"Balance\", \"Prereq\"])","category":"page"},{"location":"degreeplans.html#","page":"Creating Degree Plans","title":"Creating Degree Plans","text":"<a href=\"https://github.com/CurricularAnalytics/CurricularAnalytics.jl/blob/master/src/Optimization.jl\" target=\"_blank\">source</a>","category":"page"},{"location":"index.html#Curricular-Analytics-Toolbox-1","page":"Getting Started","title":"Curricular Analytics Toolbox","text":"","category":"section"},{"location":"index.html#","page":"Getting Started","title":"Getting Started","text":"CurricularAnalytics.jl is a toolbox for studying, analyzing and comparing academic program curricula and their associated degree plans. The toolbox was built using the Julia programming language. For assistance in installing the toolbox, see the Installation section. We welcome contributions and usage examples. If you would like to contribute to the toolbox, please see the Contributor Guide. To cite this toolbox, please see How to Cite CurricularAnalytics.jl.","category":"page"},{"location":"index.html#Terminology-1","page":"Getting Started","title":"Terminology","text":"","category":"section"},{"location":"index.html#","page":"Getting Started","title":"Getting Started","text":"A basic understanding of the terminology associated with curricula and degree programs will greatly facilitate the use of this toolbox.","category":"page"},{"location":"index.html#","page":"Getting Started","title":"Getting Started","text":"A curriculum for an academic program consists of the set of courses that a student must complete in order to earn the degree associated with that program. By successfully completing a course, a student should attain the learning outcomes associated with the course, while also earning the number of credit hours associated with the course. For instance, most associate degree programs require a student to earn a minimum of 60 credit hours, and most bachelor's degree programs require a student to earn a minimum of 120 credit hours.","category":"page"},{"location":"index.html#","page":"Getting Started","title":"Getting Started","text":"In order to attain the learning outcomes associated with course B, a student may first need to attain some of the learning outcomes associated with some other course, say A. In order to capture this requirement, course A is listed as a prerequisite for course B. That is, students may not enroll in course B unless they have successfully completed course A.  More generally, we refer to these types of requirements as requisites, and we differentiate between three types:","category":"page"},{"location":"index.html#","page":"Getting Started","title":"Getting Started","text":"Prerequisite : course A must be completed prior to attempting course B.\nCo-requisite : course A may be taken prior to or at the same time as attempting course B.\nStrict co-requisite : course A must be taken at the same time as course B.","category":"page"},{"location":"index.html#","page":"Getting Started","title":"Getting Started","text":"A degree plan is a term-by-term arrangement for taking all of the courses in a curriculum, layed out so as to satisfy all requisite relationships. A term is typically offered either in the semester (two terms/academic year) or quarter (three terms/academic year) format. It is common for schools to offer two-year degree plans for associates degrees and four-year degree plans for bachelors degrees.","category":"page"},{"location":"index.html#","page":"Getting Started","title":"Getting Started","text":"There is a one-to-many relationship between a curriculum and the degree plans that satisfy the curriculum. I.e., many different degree plans can be constructed to satisfy a single curriculum. Furthermore, it is likely that some of these degree plans are better suited to the needs of particular students. In addition, it is important to note that a degree plan may contain more courses than are stipulated in a curriculum. For instance, a student may not have the background necessary to take the first math course in a curriculum, necessitating the addition of a prerequisite math class as a part of the degree plan. ","category":"page"},{"location":"index.html#–-Example-–-1","page":"Getting Started","title":"– Example –","text":"","category":"section"},{"location":"index.html#","page":"Getting Started","title":"Getting Started","text":"Consider the Basket Weaving curriculum, consisting of the following four courses:","category":"page"},{"location":"index.html#","page":"Getting Started","title":"Getting Started","text":"BW 101 : Introduction to Baskets, 3 credits\nBW 101L : Introduction to Baskets Lab, 1 credit; strict co-requisite: BW 101\nBW 111 : Basic Basket Forms, 3 credits; prerequisite: BW 101\nBW 201 : Advanced Basketry, 3 credits; co-requisite: BW 111","category":"page"},{"location":"index.html#","page":"Getting Started","title":"Getting Started","text":"The following degree plan completes this curriculum in two terms while satisfying all of the requisite relationships:","category":"page"},{"location":"index.html#","page":"Getting Started","title":"Getting Started","text":"Term 1: BW 101, BW 101L\nTerm 2: BW 111, BW 201","category":"page"},{"location":"index.html#","page":"Getting Started","title":"Getting Started","text":"A visual representation of this degree plan is as follows: (Image: Basket Weaving degree plan)","category":"page"},{"location":"index.html#","page":"Getting Started","title":"Getting Started","text":"The solid arrow in this figure represents a prerequisite relationship, while the dashed arrows represent co-requisite relationships.","category":"page"},{"location":"index.html#Toolbox-Overview-1","page":"Getting Started","title":"Toolbox Overview","text":"","category":"section"},{"location":"index.html#","page":"Getting Started","title":"Getting Started","text":"The toolbox represents curricula as graphs, allowing various graph-theoretic measures to be applied in order to quantify the complexity of curricula. In addition to analyzing curricular complexity, the toolbox supports the ability to visualize curricula and degree plans, to compare and contrast curricula, to create optimal degree plans for completing curricula that satisfy particular constraints, and to simulate the impact of various events on student progression through a curriculum.","category":"page"},{"location":"index.html#","page":"Getting Started","title":"Getting Started","text":"The basic data types used in the CurricularAnalytics.jl libraries are described in CurricularAnalytics.jl Data Types. This section also describes a number of convenient functions that can be used to create curricula and degree plans. Functions that can be used to read and write curricula and degree plans to/from permanent storage are described in Reading/Writing Curricula & Degree Plans.","category":"page"},{"location":"index.html#","page":"Getting Started","title":"Getting Started","text":"Metrics that have been developed to quantify the complexity of curricula and degree plans are described in Metrics. Functions that can be used to study degree plans, and to create degree plans according to various constraints and optimization criteria are described in Creating Degree Plans.","category":"page"},{"location":"index.html#","page":"Getting Started","title":"Getting Started","text":"Visualization-related functions are described in Visualizing Curricula and Degree Plans.","category":"page"},{"location":"index.html#","page":"Getting Started","title":"Getting Started","text":"Detailed examples and tutorials can be found in the Curricular Analytics Notebooks repository.","category":"page"},{"location":"citing.html#How-to-Cite-CurricularAnalytics.jl-1","page":"Citing CurricularAnalytics.jl","title":"How to Cite CurricularAnalytics.jl","text":"","category":"section"},{"location":"citing.html#","page":"Citing CurricularAnalytics.jl","title":"Citing CurricularAnalytics.jl","text":"We encourage you to cite our work if you have used our libraries, tools or datasets. Starring the repository on GitHub is also appreciated.","category":"page"},{"location":"citing.html#","page":"Citing CurricularAnalytics.jl","title":"Citing CurricularAnalytics.jl","text":"To cite the latest version of the CurricularAnalytics.jl toolbox use:","category":"page"},{"location":"citing.html#","page":"Citing CurricularAnalytics.jl","title":"Citing CurricularAnalytics.jl","text":"@misc{CA:18,\n  author = {Gregory L. Heileman and Hayden Free and William G. Thompson and Orhan Abar},\n  title = {CurricularAnalytics.jl},\n  year = {2018},\n  url = {https://github.com/heileman/CurricularAnalytics.jl}\n}","category":"page"},{"location":"citing.html#","page":"Citing CurricularAnalytics.jl","title":"Citing CurricularAnalytics.jl","text":"For previous versions of the CurricularAnalytic.jl toolbox please reference the zenodo site.","category":"page"},{"location":"citing.html#","page":"Citing CurricularAnalytics.jl","title":"Citing CurricularAnalytics.jl","text":"To cite the definitive Curricular Analytics technical reference, please use the following BibTeX citation:","category":"page"},{"location":"citing.html#","page":"Citing CurricularAnalytics.jl","title":"Citing CurricularAnalytics.jl","text":"@article{Heileman18,\n  author = {Gregory L. Heileman and Chaouki T. Abdallah and Ahmad Slim and Michael Hickman},\n  title = {Curricular Analytics: A Framework for Quantifying the Impact of Curricular Reforms and Pedagogical Innovations},\n  journal = {arXiv.org},\n  url = {https://arxiv.org/submit/2471755/view},\n  year = {2018}\n}","category":"page"},{"location":"types.html#CurricularAnalytics.jl-Data-Types-1","page":"Data Types","title":"CurricularAnalytics.jl Data Types","text":"","category":"section"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"This section describes the basic data types associated with the CurricularAnalytics.jl toolbox. These are used to construct courses (with associated learning outcomes), curricula and degree plans.","category":"page"},{"location":"types.html#Courses-1","page":"Data Types","title":"Courses","text":"","category":"section"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"Course","category":"page"},{"location":"types.html#CurricularAnalytics.Course","page":"Data Types","title":"CurricularAnalytics.Course","text":"The Course data type is used to represent a single course consisting of a given number  of credit hours.  To instantiate a Course use:\n\nCourse(name, credit_hours; <keyword arguments>)\n\nArguments\n\nRequired:\n\nname::AbstractString : the name of the course.\ncredit_hours::int : the number of credit hours associated with the course.\n\nKeyword:\n\nprefix::AbstractString : the prefix associated with the course.\nnum::AbstractString : the number associated with the course.\ninstitution:AbstractString : the name of the institution offering the course.\ncanonical_name::AbstractString : the common name used for the course.\n\nExamples:\n\njulia> Course(\"Calculus with Applications\", 4, prefix=\"MA\", num=\"112\", canonical_name=\"Calculus I\")\n\n\n\n\n\n","category":"type"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"Once a course has been created, requisites may be added to it, or deleted from it, using the following functions.","category":"page"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"add_requisite!\ndelete_requisite!","category":"page"},{"location":"types.html#CurricularAnalytics.add_requisite!","page":"Data Types","title":"CurricularAnalytics.add_requisite!","text":"add_requisite!(rc, tc, requisite_type)\n\nAdd course rc as a requisite, of type requisite_type, for target course tc.\n\nRequisite types\n\nOne of the following requisite types must be specified for rc:\n\npre : a prerequisite course that must be passed before tc can be attempted.\nco  : a co-requisite course that may be taken before or at the same time as tc.\nstrict_co : a strict co-requisite course that must be taken at the same time as tc.\n\n\n\n\n\nadd_requisite!([rc1, rc2, ...], tc, [requisite_type1, requisite_type2, ...])\n\nAdd a collection of requisites to target course tc.\n\nRequisite types\n\nThe following requisite types may be specified for rc:\n\npre : a prerequisite course that must be passed before tc can be attempted.\nco  : a co-requisite course that may be taken before or at the same time as tc.\nstrict_co : a strict co-requisite course that must be taken at the same time as tc.\n\n\n\n\n\n","category":"function"},{"location":"types.html#CurricularAnalytics.delete_requisite!","page":"Data Types","title":"CurricularAnalytics.delete_requisite!","text":"delete_requisite!(rc, tc)\n\nRemove course rc as a requisite for target course tc.  If rc is not an existing requisite for tc, an error is thrown.\n\nRequisite types\n\nThe following requisite types may be specified for rc:\n\npre : a prerequisite course that must be passed before tc can be attempted.\nco  : a co-requisite course that may be taken before or at the same time as tc.\nstrict_co : a strict co-requisite course that must be taken at the same time as tc.\n\n\n\n\n\n","category":"function"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"Just like courses, learning outcomes can have requisite relationships between them.","category":"page"},{"location":"types.html#Learning-Outcomes-1","page":"Data Types","title":"Learning Outcomes","text":"","category":"section"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"LearningOutcome","category":"page"},{"location":"types.html#CurricularAnalytics.LearningOutcome","page":"Data Types","title":"CurricularAnalytics.LearningOutcome","text":"The LearningOutcome data type is used to associate a set of learning outcomes with  a course or a curriculum. To instantiate a LearningOutcome use:\n\nLearningOutcome(name, description, hours)\n\nArguments\n\nname::AbstractString : the name of the learning outcome.\ndescription::AbstractString : detailed description of the learning outcome.\nhours::int : number of class (contact) hours needed to attain the learning outcome. \n\nExamples:\n\njulia> LearningOutcome(\"M1\", \"Learner will demonstrate the ability to ...\", 12)\n\n\n\n\n\n","category":"type"},{"location":"types.html#Curricula-1","page":"Data Types","title":"Curricula","text":"","category":"section"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"To create a curriculum from a collection of courses, and their associated requisites, use:","category":"page"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"Curriculum","category":"page"},{"location":"types.html#CurricularAnalytics.Curriculum","page":"Data Types","title":"CurricularAnalytics.Curriculum","text":"The Curriculum data type is used to represent the collection of courses that must be be completed in order to earn a particualr degree. Thus, we use the terms curriculum and degree program synonymously. To instantiate a Curriculum use:\n\nCurriculum(name, courses; <keyword arguments>)\n\nArguments\n\nRequired:\n\nname::AbstractString : the name of the curriculum.\ncourses::Array{Course} : the collection of required courses that comprise the curriculum.\n\nKeyword:\n\ndegree_type::Degree : the type of degree, allowable    types: AA, AS, AAS, BA, BS (default).\ninstitution:AbstractString : the name of the institution offering the curriculum.\nsystem_type::System : the type of system the institution uses, allowable    types: semester (default), quarter.\nCIP::AbstractString : the Classification of Instructional Programs (CIP) code for the    curriculum.  See: https://nces.ed.gov/ipeds/cipcode\n\nExamples:\n\njulia> Curriculum(\"Biology\", courses, institution=\"South Harmon Tech\", degree_type=AS, CIP=\"26.0101\")\n\n\n\n\n\n","category":"type"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"The following function can be used to ensure that a constructed curriculum is valid.","category":"page"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"isvalid_curriculum","category":"page"},{"location":"types.html#CurricularAnalytics.isvalid_curriculum","page":"Data Types","title":"CurricularAnalytics.isvalid_curriculum","text":"isvalid_curriculum(c::Curriculum, errors::IOBuffer)\n\nTests whether or not the curriculum graph G_c associated with curriculum c is valid, i.e.,  whether or not it contains a requisite cycle.  Returns  a boolean value, with true indicating the  curriculum is valid, and false indicating it is not.\n\nIf G_c is not valid, the requisite cycle(s) are written to the errors buffer. To view these  cycles, use:\n\njulia> errors = IOBuffer()\njulia> isvalid_curriculum(c, errors)\njulia> println(String(take!(errors)))\n\nA curriculum graph is not valid if it contains a directed cycle; in this case it is not possible to complete  the curriculum.  \n\n\n\n\n\n","category":"function"},{"location":"types.html#Terms-1","page":"Data Types","title":"Terms","text":"","category":"section"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"Term","category":"page"},{"location":"types.html#CurricularAnalytics.Term","page":"Data Types","title":"CurricularAnalytics.Term","text":"The Term data type is used to represent a single term within a DegreePlan. To  instantiate a Term use:\n\nTerm([c1, c2, ...])\n\nwhere c1, c2, ... are Course data objects\n\n\n\n\n\n","category":"type"},{"location":"types.html#Degree-Plans-1","page":"Data Types","title":"Degree Plans","text":"","category":"section"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"To create a degree plan that satisfies the courses associated with a particular curriculum use:","category":"page"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"DegreePlan","category":"page"},{"location":"types.html#CurricularAnalytics.DegreePlan","page":"Data Types","title":"CurricularAnalytics.DegreePlan","text":"The DegreePlan data type is used to represent the collection of courses that must be be completed in order to earn a particualr degree.  To instantiate a Curriculum use:\n\nDegreePlan(name, curriculum, terms, additional_courses)\n\nArguments\n\nname::AbstractString : the name of the degree plan.\ncurriculum::Curriculum : the curriculum the degree plan must satisfy.\nterms::Array{Term} : the arrangement of terms associated with the degree plan.\nadditional_courses::Array{Course} : additional courses in the degree plan that are not  a part of the curriculum. E.g., a prerequisite math class to the first required math  class in the curriculum.\n\nExamples:\n\njulia> DegreePlan(\"Biology 4-year Degree Plan\", curriculum, terms)\n\n\n\n\n\n","category":"type"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"The following function can be used to ensure that a constructed degree plan is valid.","category":"page"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"isvalid_degree_plan","category":"page"},{"location":"types.html#CurricularAnalytics.isvalid_degree_plan","page":"Data Types","title":"CurricularAnalytics.isvalid_degree_plan","text":"isvalid_degree_plan(plan::DegreePlan, errors::IOBuffer)\n\nTests whether or not the degree plan plan is valid.  Returns a boolean value, with true indicating the  degree plan is valid, and false indicating it is not.\n\nIf plan is not valid, the reason(s) why are written to the errors buffer. To view these  reasons, use:\n\njulia> errors = IOBuffer()\njulia> isvalid_degree_plan(plan, errors)\njulia> println(String(take!(errors)))\n\nThere are two reasons why a curriculum graph might not be valid:\n\nRequisites not satsified : A prerequisite for a course occurs in a later term than the course itself.\nIncomplete plan : There are course in the curriculum not included in the degree plan.\nRedundant plan : The same course appears in the degree plan multiple times. \n\n\n\n\n\n","category":"function"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"To find the term where a given course is located within a degree plan use:","category":"page"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"find_term","category":"page"},{"location":"types.html#CurricularAnalytics.find_term","page":"Data Types","title":"CurricularAnalytics.find_term","text":"find_term(plan::DegreePlan, course::Course)\n\nIn degree plan plan, find the term in which course course appears.  If course in not in the degree plan an error message is provided.\n\n\n\n\n\n","category":"function"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"To see the terms and courses associated with a degree plan use:","category":"page"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"print_plan","category":"page"},{"location":"types.html#CurricularAnalytics.print_plan","page":"Data Types","title":"CurricularAnalytics.print_plan","text":"print_plan(plan::DegreePlan)\n\nUgly print out of a degree plan to the Julia console.\n\n\n\n\n\n","category":"function"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"The ability to create degree plans that satsify very \"goodness\" criteria is described in more detail in Creating Degree Plans.","category":"page"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"A sophisticated visualization capability for viewing degree plans is described in Visualizing Curricula and Degree Plans.  An example of how to use capability is shown below.","category":"page"},{"location":"types.html#Examples:-1","page":"Data Types","title":"Examples:","text":"","category":"section"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"The following commands will produce the visualization shown below:","category":"page"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"julia> A = Course(\"Introduction to Baskets\", 3)\njulia> B = Course(\"Introduction to Baskets Lab\", 1)\njulia> C = Course(\"Basic Basket Forms\", 3)\njulia> D = Course(\"Advanced Basketry\", 3)\njulia> add_requisite!(A, B, strict_co)\njulia> add_requisite!(A, C, pre)\njulia> add_requisite!(C, D, co)\njulia> curric = Curriculum(\"Basket Weaving\", [A,B,C,D])\njulia> terms = Array{Term}(undef, 2)\njulia> terms[1] = Term([A,B])\njulia> terms[2] = Term([C,D])\njulia> dp = DegreePlan(\"2-Term Plan\", curric, terms)\njulia> visualize(dp)","category":"page"},{"location":"types.html#","page":"Data Types","title":"Data Types","text":"(Image: Basket Weaving degree plan)","category":"page"}]
}
