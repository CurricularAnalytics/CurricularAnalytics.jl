        - # ==============================
        - # CSV Read / Write Functionality
        - # ==============================
        - using CSV
        - using DataFrames
        - include("CSVUtilities.jl")
        - 
        - """
        -     read_csv(file_path::AbstractString)
        - 
        - Read (i.e., deserialize) a CSV file containing either a curriculum or a degree plan, and returns a corresponding
        - `Curriculum` or `DegreePlan` data object.  The required format for curriculum or degree plan CSV files is 
        - described in [File Format](@ref).
        - 
        - # Arguments
        - - `file_path::AbstractString` : the relative or absolute path to the CSV file.
        - 
        - # Examples:
        - ```julia-repl
        - julia> c = read_csv("./mydata/UBW_curric.csv")
        - julia> dp = read_csv("./mydata/UBW_plan.csv")
        - ```
        - """
        6 function read_csv(file_path::AbstractString)
        6     file_path = remove_empty_lines(file_path)
        6     if typeof(file_path) == Bool && !file_path
        0         return false
        -     end
        -     # dict_curric_degree_type = Dict("AA"=>AA, "AS"=>AS, "AAS"=>AAS, "BA"=>BA, "BS"=>BS, ""=>BS)
        6     dict_curric_system = Dict("semester"=>semester, "quarter"=>quarter, ""=>semester)
        6     dp_name = ""
        6     dp_add_courses = Array{Course,1}()
        6     curric_name = ""
        6     curric_inst = ""
        6     curric_dtype = "BS"
        6     curric_stype = dict_curric_system["semester"]
        6     curric_CIP = ""
        6     courses_header = 1
        6     course_count = 0
        6     additional_course_start=0
        6     additional_course_count=0
        6     learning_outcomes_start=0
        6     learning_outcomes_count=0
        6     curric_learning_outcomes_start=0
        6     curric_learning_outcomes_count=0
        6     part_missing_term=false
        6     output = ""
        -     # Open the CSV file and read in the basic information such as the type (curric or degreeplan), institution, degree type, etc 
        6     open(file_path) do csv_file
        6         read_line = csv_line_reader(readline(csv_file), ',')
        6         courses_header += 1
        6         if strip(read_line[1]) == "Curriculum"
        6             curric_name = read_line[2]
        6             read_line = csv_line_reader(readline(csv_file), ',')
        6             is_dp = read_line[1] == "Degree Plan"
        6             if is_dp 
        2                 dp_name = read_line[2]
        2                 read_line = csv_line_reader(readline(csv_file), ',')
        2                 courses_header += 1
        -             end
        6             if read_line[1] == "Institution"
        6                 curric_inst = read_line[2]
        6                 read_line = csv_line_reader(readline(csv_file), ',')
        6                 courses_header += 1
        -             end
        6             if read_line[1] == "Degree Type"
        6                 curric_dtype = read_line[2]
        6                 read_line = csv_line_reader(readline(csv_file), ',')
        6                 courses_header += 1
        -             end
        6             if read_line[1] == "System Type"
        6                 curric_stype = dict_curric_system[lowercase(read_line[2])]
        6                 read_line = csv_line_reader(readline(csv_file), ',')
        6                 courses_header += 1
        -             end
        6             if read_line[1] == "CIP"
        6                 curric_CIP = read_line[2]
        6                 read_line = csv_line_reader(readline(csv_file), ',')
        6                 courses_header += 1
        -             end
        6             if read_line[1] == "Courses"
        6                 courses_header += 1 
        -             else
        0                 println("Could not find Courses")
        0                 return false
        -             end         
        -         
        -         # File isn't formatted correctly, couldn't find the curriculum field in Col A Row 1
        -         else 
        0             println("Could not find a Curriculum")
        0             return false
        -         end
        - 
        -         # This is the row containing Course ID, Course Name, Prefix, etc
        6         read_line = csv_line_reader(readline(csv_file), ',')
        -         
        -         # Checks that all courses have an ID, and counts the total number of courses
      216         while length(read_line) > 0 && read_line[1] != "Additional Courses" && read_line[1] != "Course Learning Outcomes" && 
        -                     read_line[1] != "Curriculum Learning Outcomes" && !startswith(read_line[1], "#")
        - 
        -             # Enforce that each course has an ID
      105             if length(read_line[1]) == 0
        -                 # skip blank lines
        0                 if !any(x -> (x != "" && x != " " && x != ' '), read_line)
        0                     read_line = csv_line_reader(readline(csv_file), ',')
        0                     continue
        -                 end
        0                 println("All courses must have a Course ID (1)")
        0                 return false
        -             end
        - 
        -             # Enforce that each course has an associated term if the file is a degree plan
      105             if (is_dp)
       20                 if (length(read_line) == 10)
        0                     error("Each Course in a Degree Plan must have an associated term." * 
        -                             "\nCourse with ID \'$(read_line[1])\' ($(read_line[2])) has no term.")
        0                     return false
       20                 elseif (read_line[11] == 0)
        0                     error("Each Course in a Degree Plan must have an associated term." * 
        -                             "\nCourse with ID \'$(read_line[1])\' ($(read_line[2])) has no term.")
        0                     return false
        -                 end
        -             end
        - 
      105             course_count += 1
      210             read_line = csv_line_reader(readline(csv_file), ',')
        -         end
        - 
        6         df_courses = CSV.File(file_path, header = courses_header, limit = course_count - 1, delim = ',', silencewarnings = true) |> DataFrame
        6         if nrow(df_courses) != nrow(unique(df_courses, Symbol("Course ID")))
        0             println("All courses must have a unique Course ID (2)")
        0             return false
        -         end
       10         if !is_dp && Symbol("Term") in names(df_courses)
        0             println("Curriculum cannot have term information.")
        0             return false
        -         end
        6         df_all_courses = DataFrame()
        6         df_additional_courses = DataFrame()
        6         if length(read_line) > 0 && read_line[1] == "Additional Courses"
        1             if !is_dp 
        0                 println("Only Degree Plan can have additional courses") 
        0                 return false
        -             end
        1             additional_course_start = courses_header+course_count+1
        1             read_line = csv_line_reader(readline(csv_file), ',')
       11             while length(read_line) > 0 && read_line[1] != "Course Learning Outcomes" && 
        -                 read_line[1] != "Curriculum Learning Outcomes" && !startswith(read_line[1], "#")
        5                 additional_course_count += 1
        5                 read_line = csv_line_reader(readline(csv_file), ',')
        -             end     
        -         end
        6         if additional_course_count > 1
        1             df_additional_courses = CSV.File(file_path, header = additional_course_start, limit = additional_course_count - 1, delim = ',', silencewarnings = true) |> DataFrame
        1             df_all_courses = vcat(df_courses,df_additional_courses)
        -         else
        5             df_all_courses = df_courses
        -         end
        -          
        6         df_course_learning_outcomes=""
        6         if length(read_line)>0 && read_line[1] == "Course Learning Outcomes"
        0             learning_outcomes_start = additional_course_start+additional_course_count+1
        0             read_line = csv_line_reader(readline(csv_file), ',')
        0             while length(read_line)>0 && !startswith(read_line[1],"#")  && read_line[1] != "Curriculum Learning Outcomes"
        0                 learning_outcomes_count +=1
        0                 read_line = csv_line_reader(readline(csv_file), ',')
        -             end  
        0             if learning_outcomes_count > 1
        0                 df_course_learning_outcomes = CSV.File(file_path, header = learning_outcomes_start, limit = learning_outcomes_count - 1, delim = ',', silencewarnings = true) |> DataFrame
        -             end
        -         end    
        6         course_learning_outcomes = Dict{Int, Array{LearningOutcome}}()
        6         if df_course_learning_outcomes != "" 
        0             course_learning_outcomes = generate_course_lo(df_course_learning_outcomes)
        0             if typeof(course_learning_outcomes) == Bool && !course_learning_outcomes
        0                 return false
        -             end
        -         end
        -         
        6         df_curric_learning_outcomes = ""
        6         if length(read_line)>0 && read_line[1] == "Curriculum Learning Outcomes"
        0             curric_learning_outcomes_start = learning_outcomes_start+learning_outcomes_count+1
        0             read_line = csv_line_reader(readline(csv_file), ',')
        0             while length(read_line)>0 && !startswith(read_line[1],"#")
        0                 curric_learning_outcomes_count +=1
        0                 read_line = csv_line_reader(readline(csv_file), ',')
        -             end            
        0             if learning_outcomes_count > 1
        0                 df_curric_learning_outcomes = CSV.File(file_path, header = curric_learning_outcomes_start, limit = curric_learning_outcomes_count - 1, delim = ',', silencewarnings = true) |> DataFrame
        -             end
        -         end  
        -         
       18         curric_learning_outcomes = if df_curric_learning_outcomes != "" generate_curric_lo(df_curric_learning_outcomes) else LearningOutcome[] end
        - 
        6         if is_dp
        2             all_courses = read_all_courses(df_all_courses, course_learning_outcomes)
        2             if typeof(all_courses) == Bool && !all_courses
        0                 return false
        -             end
        4             all_courses_arr = [course[2] for course in all_courses]
        2             additional_courses = read_courses(df_additional_courses, all_courses)  
        2             ac_arr = Course[]
        3             for course in additional_courses
        7                 push!(ac_arr, course[2])
        -             end
        2             curric = Curriculum(curric_name, all_courses_arr, learning_outcomes = curric_learning_outcomes, degree_type = curric_dtype,
        -                                     system_type=curric_stype, institution=curric_inst, CIP=curric_CIP)
        2             terms = read_terms(df_all_courses, all_courses, all_courses_arr)
        -             #If some courses has term informations but some does not
        2             if isa(terms, Tuple)
        -                 #Add curriculum to the output tuple
        0                 output = (terms..., curric, dp_name, ac_arr) # ... operator enumrates the terms
        -             else
        2                 degree_plan = DegreePlan(dp_name, curric, terms, ac_arr)
        2                 output = degree_plan
        -             end
        -         else
        4             curric_courses = read_all_courses(df_courses, course_learning_outcomes)
        4             if typeof(curric_courses) == Bool && !curric_courses
        0                 return false
        -             end
        8             curric_courses_arr = [course[2] for course in curric_courses] 
        4             curric = Curriculum(curric_name, curric_courses_arr, learning_outcomes = curric_learning_outcomes, degree_type = curric_dtype,
        -                                     system_type=curric_stype, institution=curric_inst, CIP=curric_CIP)
        4             output = curric            
        -         end
        -     end
        -     # Current file is the temp file created by remove_empty_lines(), remove the file.
       12     if file_path[end-8:end] == "_temp.csv"
        6         GC.gc()
        6         rm(file_path)
        -     end
        6     return output
        - 
        - end
        - 
        - """
        -     write_csv(c::Curriculum, file_path::AbstractString)
        - 
        - Write (i.e., serialize) a `Curriculum` data object to disk as a CSV file. To read 
        - (i.e., deserialize) a curriculum CSV file, use the corresponding `read_csv` function.
        - The file format used to store curricula is described in [File Format](@ref).
        - 
        - # Arguments
        - - `c::Curriculum` : the `Curriculum` data object to be serialized.
        - - `file_path::AbstractString` : the absolute or relative path where the CSV file will be stored.
        - 
        - # Examples:
        - ```julia-repl
        - julia> write_csv(c, "./mydata/UBW_curric.csv")
        - ```
        - """
        2 function write_csv(curric::Curriculum, file_path::AbstractString; iostream=false, metrics=false)
        2     if iostream == true
        0         csv_file = IOBuffer()
        0         write_csv_content(csv_file, curric, false, metrics=metrics)
        0         return csv_file
        -     else
        1         open(file_path, "w") do csv_file
        1             write_csv_content(csv_file, curric, false, metrics=metrics)
        -         end
        1         return true
        -     end
        - end
        - 
        - # TODO - Reduce duplicated code between this and the curriculum version of the function
        - """
        -     write_csv(dp::DegreePlan, file_path::AbstractString)
        - 
        - Write (i.e., serialize) a `DegreePlan` data object to disk as a CSV file. To read 
        - (i.e., deserialize) a degree plan CSV file, use the corresponding `read_csv` function.
        - The file format used to store degree plans is described in [File Format](@ref).
        - 
        - # Arguments
        - - `dp::DegreePlan` : the `DegreePlan` data object to be serialized.
        - - `file_path::AbstractString` : the absolute or relative path where the CSV file will be stored. 
        - 
        - # Examples:
        - ```julia-repl
        - julia> write_csv(dp, "./mydata/UBW_plan.csv")
        - ```
        - """
        2 function write_csv(original_plan::DegreePlan, file_path::AbstractString; iostream=false, metrics=false)
        2     if iostream
        0         csv_file = IOBuffer()
        0         write_csv_content(csv_file, original_plan, true, metrics=metrics)
        -     else  
        1         open(file_path, "w") do csv_file
        1             write_csv_content(csv_file, original_plan, true, metrics=metrics)
        -         end
        1         return true
        -     end
        - end
        - 
        - 
        4 function write_csv_content(csv_file, program, is_degree_plan; metrics=false)
        -     # dict_curric_degree_type = Dict(AA=>"AA", AS=>"AS", AAS=>"AAS", BA=>"BA", BS=>"BS")
        4     dict_curric_system = Dict(semester=>"semester", quarter=>"quarter")
        -     # Write Curriculum Name
        2     if is_degree_plan
        -         # Grab a copy of the curriculum
        1         curric = program.curriculum
        1         curric_name = "Curriculum," * "\""*string(curric.name) *"\""* ",,,,,,,,,"
        -     else
        1         curric = program
        1         curric_name = "Curriculum," * string(curric.name) * ",,,,,,,,,"
        -     end
        2     write(csv_file, curric_name)
        -     
        -     # Write Degree Plan Name
        2     if is_degree_plan
        1         dp_name = "\nDegree Plan," * "\""*string(program.name) *"\""* ",,,,,,,,,"
        1         write(csv_file, dp_name)
        -     end
        - 
        -     # Write Institution Name
        2     curric_ins = "\nInstitution," * "\""*string(curric.institution) *"\""* ",,,,,,,,,"
        2     write(csv_file, curric_ins) 
        - 
        -     # Write Degree Type
        2     curric_dtype = "\nDegree Type," *"\""* string(curric.degree_type) * "\""*",,,,,,,,,"
        2     write(csv_file,curric_dtype) 
        - 
        -     # Write System Type (Semester or Quarter)
        2     curric_stype = "\nSystem Type," * "\""*string(dict_curric_system[curric.system_type]) * "\""*",,,,,,,,,"
        2     write(csv_file, curric_stype) 
        -     
        -     # Write CIP Code
        2     curric_CIP = "\nCIP," * "\""*string(curric.CIP) * "\""*",,,,,,,,,"
        2     write(csv_file, curric_CIP)
        -     
        -     # Define course header
        2     if is_degree_plan
        1         if metrics
        0             course_header="\nCourse ID,Course Name,Prefix,Number,Prerequisites,Corequisites,Strict-Corequisites,Credit Hours,Institution,Canonical Name,Term,Complexity,Blocking,Delay,Centrality"
        -         else
        -             # 11 cols for degree plans (including term)
        2             course_header = "\nCourse ID,Course Name,Prefix,Number,Prerequisites,Corequisites,Strict-Corequisites,Credit Hours,Institution,Canonical Name,Term"
        -         end
        -     else
        1         if metrics
        0             course_header="\nCourse ID,Course Name,Prefix,Number,Prerequisites,Corequisites,Strict-Corequisites,Credit Hours,Institution,Canonical Name,Complexity,Blocking,Delay,Centrality"
        -         else
        -             # 10 cols for curricula (no term)
        1             course_header="\nCourse ID,Course Name,Prefix,Number,Prerequisites,Corequisites,Strict-Corequisites,Credit Hours,Institution,Canonical Name"
        -         end
        -     end
        2     write(csv_file, "\nCourses,,,,,,,,,,") 
        2     write(csv_file, course_header) 
        - 
        -     # Define dict to store all course learning outcomes
        2     all_course_lo = Dict{Int, Array{LearningOutcome, 1}}()
        -     
        -     # if metrics is true ensure that all values are present before writing courses
        2     if metrics
        0         complexity(curric)
        0         blocking_factor(curric)
        0         delay_factor(curric)
        0         centrality(curric)
        -     end
        - 
        -     # write courses (and additional courses for degree plan)
        2     if is_degree_plan
        -         # Iterate through each term and each course in the term and write them to the degree plan
        1         for (term_id, term) in enumerate(program.terms)
        3             for course in term.courses
        6                 if !isdefined(program, :additional_courses) || !find_courses(program.additional_courses, course.id)
        6                     write(csv_file, course_line(course, term_id, metrics = metrics)) 
        -                 end
        -             end
        -         end
        -         # Check if the original plan has additional courses defined
        1         if isdefined(program, :additional_courses)
        -             # Write the additional courses section of the CSV
        0             write(csv_file, "\nAdditional Courses,,,,,,,,,,")
        0             write(csv_file, course_header) 
        -             # Iterate through each term
        0             for (term_id, term) in enumerate(program.terms)
        -                 # Iterate through each course in the current term
        0                 for course in term.courses
        -                     # Check if the current course is an additional course, if so, write it here
        0                     if find_courses(program.additional_courses, course.id)
        0                         write(csv_file, course_line(course, term_id, metrics = metrics)) 
        -                     end
        -                     # Check if the current course has learning outcomes, if so store them
        0                     if length(course.learning_outcomes) > 0
        0                         all_course_lo[course.id] = course.learning_outcomes
        -                     end
        -                 end
        -             end
        -         end
        -     else
        -     # Iterate through each course in the curriculum
        1         for course in curric.courses
        -             # Write the current course to the CSV
        6             write(csv_file, course_line(course, "", metrics = metrics))
        -             # Check if the course has learning outcomes, if it does store them
        6             if length(course.learning_outcomes) > 0
        1                 all_course_lo[course.id] = course.learning_outcomes
        -             end
        -         end
        -     end
        - 
        -     # Write course and curriculum learning outcomes, if any
        2     write_learning_outcomes(curric, csv_file, all_course_lo) 
        - end
