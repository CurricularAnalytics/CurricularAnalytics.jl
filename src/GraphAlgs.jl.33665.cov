        - # File: GraphAlgs.jl
        - 
        - # Depth-first search, returns edge classification using EdgeClass, as well as the discovery and finish time for each vertex.
        - """
        - dfs(g)
        - 
        - Perform a depth-first traversal of input graph `g`.
        - 
        - # Arguments
        - Required:
        - - `g::AbstractGraph` : input graph.
        - 
        - This function returns the classification of each edge in graph `g`, as well as the order in which vertices are
        - first discovered during a depth-first search traversal, and when the processing from that vertex is completed
        - during the depth-first traverlsa.  According to the vertex discovery and finish times, each edge in `g` will be 
        - classified as one of:
        -  - *tree edge* : Any collection of edges in `g` that form a forest. Every vertex is either a single-vertex tree 
        -  with respect to such a collection, or is part of some larger tree through its connection to another vertex via a 
        -  tree edge. This collection is not unique defined on `g`.
        -  - *back edge* : Given a collection of tree edges, back edges are those edges that connect some descendent vertex 
        -  in a tree to an ancestor vertex in the same tree.
        -  - *forward edge* : Given a collection of tree edges, forward edges are those that are incident from an ancestor 
        -  in a tree, and incident to an descendent in the same tree.
        -  - *cross edge* : Given a collection of tree edges, cross edges are those that are adjacent between vertices in 
        -  two different trees, or between vertices in two different subtrees in the same tree.
        - 
        - ```julia-repl
        - julia> edges, discover, finish = dfs(g)
        - ```
        - """
        4 function dfs(g::AbstractGraph{T}) where T
        4     time = 0
        -     # discover and finish times
       48     d = zeros(Int, nv(g))
       48     f = zeros(Int, nv(g))
        4     edge_type = Dict{Edge,EdgeClass}()
        8     for s in vertices(g)
       48         if d[s] == 0  # undiscovered
        -             # a closure, shares variable space w/ outer function
       72             function dfs_visit(s)
       48                 d[s] = time += 1  # discovered
       80                 for n in neighbors(g, s)
       28                     if d[n] == 0 # encounted a undiscovered vertex
       24                         edge_type[Edge(s,n)] = tree_edge
       24                         dfs_visit(n)
        4                     elseif f[n] == 0 # encountered a discovered but unfinished vertex
        0                         edge_type[Edge(s,n)] = back_edge
        -                     else  # encountered a finished vertex
        4                         if d[s] < d[n]
        0                             edge_type[Edge(s,n)] = forward_edge
        -                         else # d[s] > d[n]
       48                             edge_type[Edge(s,n)] = cross_edge
        -                         end
        -                     end
        -                 end
       48                 f[s] = time += 1  # finished
        -             end # end closure
       68             dfs_visit(s)  # call the closure
        -         end
        -     end
        4     return edge_type, d, f
        - end # end dfs
        - 
        - # In a DFS of a DAG, sorting the vertices according to their finish times in the DFS will yeild a topological sorting of the 
        - # DAG vertices. 
        -  """
        -     topological_sort(g; <keyword arguments>)
        - 
        - Perform a topoloical sort on graph `g`, returning the weakly connected components of the graph, each in topological sort order.
        - If the `sort` keyword agrument is supplied, the components will be sorted according to their size, in either ascending or 
        - descending order.  If two or more components have the same size, the one with the smallest vertex ID in the first position of the 
        - topological sort will appear first.
        - 
        - # Arguments
        - Required:
        - - `g::AbstractGraph` : input graph.
        - 
        - Keyword:
        - - `sort::String` : sort weakly connected components according to their size, allowable 
        - strings: `ascending`, `descending`.
        - """
        6 function topological_sort(g::AbstractGraph{T}; sort::String="") where T
        6     edges_type, d, f = dfs(g)
        3     topo_order = sortperm(f, rev=true)
        3     wcc = weakly_connected_components(g)
        3     if sort == "descending"
        6         sort!(wcc, lt = (x,y) -> size(x) != size(y) ? size(x) > size(y) : x[1] < y[1]) # order components by size, if same size, by lower index
        2     elseif sort == "ascending"
       10         sort!(wcc, lt = (x,y) -> size(x) != size(y) ? size(x) < size(y) : x[1] < y[1]) # order components by size, if same size, by lower index
        -     end
        3     reorder = [] 
        3     for component in wcc
       57         sort!(component, lt = (x,y) -> indexin(x, topo_order)[1] < indexin(y, topo_order)[1]) # topological sort within each component 
       15         for i in component
       39             push!(reorder, i) # add verteix indicies to the end of the reorder array
        -         end
        -     end
        3     return wcc
        - end
        - 
        - # transpose of DAG
        - """
        -     gad(g)
        - 
        - Returns the transpose of directed acyclic graph (DAG) `g`, i.e., a DAG identical to `g`, except the direction
        - of all edges is reversed.  If `g` is not a DAG, and error is thrown.
        - 
        - # Arguments
        - Required:
        - - `g::SimpleDiGraph` : input graph.
        - """
        5 function gad(g::AbstractGraph{T}) where T
        5     @assert typeof(g) == SimpleDiGraph{T}
        5     return SimpleDiGraph(transpose(adjacency_matrix(g)))
        - end
        - 
        - # The set of all vertices in the graph reachable from vertex s
        - """
        -     reachable_from(g, s)
        - 
        - Returns the the set of all vertices in `g` that are reachable from vertex `s`.
        - 
        - # Arguments
        - Required:
        - - `g::AbstractGraph` : acylic input graph. 
        - - `s::Int` : index of the source vertex in `g`.
        - """
      157 function reachable_from(g::AbstractGraph{T}, s::Int, vlist::Array=Array{Int64,1}()) where T
      222     for v in neighbors(g, s)
       71         if findfirst(isequal(v), vlist) == nothing  # v is not in vlist
       55             push!(vlist, v)
        -         end
      108         reachable_from(g, v, vlist)
        -     end
      110     return vlist
        - end
        - 
        - # The subgraph induced by vertex s and the vertices reachable from vertex s
        - """
        -     reachable_from_subgraph(g, s)
        - 
        - Returns the subgraph induced by `s` in `g` (i.e., a graph object consisting of vertex 
        - `s` and all vertices reachable from vertex `s` in`g`), as well as a vector mapping the vertex
        - IDs in the subgraph to their IDs in the orginal graph `g`.
        - 
        - ```julia-rep
        -     sg, vmap = reachable_from_subgraph(g, s)
        - ````
        - """
        1 function reachable_from_subgraph(g::AbstractGraph{T}, s::Int) where T
        1     vertices = reachable_from(g, s)
        1     push!(vertices, s)  # add the source vertex to the reachable set
        1     induced_subgraph(g, vertices)
        - end
        - 
        - # The set of all vertices in the graph that can reach vertex s
        - """
        -     reachable_to(g, t)
        - 
        - Returns the set of all vertices in `g` that can reach target vertex `t` through any path.
        - 
        - # Arguments
        - Required:
        - - `g::AbstractGraph` : acylic input graph. 
        - - `t::Int` : index of the target vertex in `g`. 
        - """
        4 function reachable_to(g::AbstractGraph{T}, t::Int) where T
        4     reachable_from(gad(g), t)  # vertices reachable from s in the transpose graph
        -  end
        - 
        - # The subgraph induced by vertex s and the vertices that can reach s
        - """
        -     reachable_to_subgraph(g, t)
        - 
        - Returns a subgraph in `g` consisting of vertex `t` and all vertices that can reach 
        - vertex `t` in`g`, as well as a vector mapping the vertex IDs in the subgraph to their IDs 
        - in the orginal graph `g`.
        - 
        - # Arguments
        - Required:
        - - `g::AbstractGraph` : acylic graph. 
        - - `t::Int` : index of the target vertex in `g`. 
        - 
        - ```julia-rep
        -     sg, vmap = reachable_to(g, t)
        - ````
        - """
        1 function reachable_to_subgraph(g::AbstractGraph{T}, s::Int) where T
        1     vertices = reachable_to(g, s)
        1     push!(vertices, s)  # add the source vertex to the reachable set
        1     induced_subgraph(g, vertices)
        - end
        - 
        - # The set of all vertices reachable to and reachable from vertex s
        - """
        -     reach(g, v)
        - 
        - Returns the reach of vertex `v` in `g`, ie., the set of all vertices in `g` that can 
        - reach vertex `v` and can be reached from `v`.
        - 
        - # Arguments
        - Required:
        - - `g::AbstractGraph` : acylic graph. 
        - - `v::Int` : index of a vertex in `g`. 
        - """
        2 function reach(g::AbstractGraph{T}, v::Int) where T
        2     union(reachable_to(g, v), reachable_from(g, v))
        - end
        - 
        - # Subgraph induced by the reach of a vertex
        - """
        -     reach_subgraph(g, v)
        - 
        - Returns a subgraph in `g` consisting of vertex `v ` and all vertices that can reach `v`, as 
        - well as all vertices that `v` can reach.  In addition, a vector is returned that maps the 
        - vertex IDs in the subgraph to their IDs in the orginal graph `g`.
        - 
        - # Arguments
        - Required:
        - - `g::AbstractGraph` : acylic graph. 
        - - `v::Int` : index of a vertex in `g`. 
        - 
        - ```julia-rep
        -     sg, vmap = reachable_to(g, v)
        - ````
        - """
        1 function reach_subgraph(g::AbstractGraph{T}, v::Int) where T
        1     vertices = reach(g, v)
        1     push!(vertices, v)  # add the source vertex to the reachable set
        1     induced_subgraph(g, vertices)
        - end
        - 
        - # find all paths in a graph
        - """
        -     all_paths(g)
        - 
        -  Enumerate all of the unique paths in acyclic graph `g`, where a path in this case must include a 
        -  source vertex (a vertex with in-degree zero) and a different sink vertex (a vertex with out-degree 
        -  zero).  I.e., a path is this case must contain at least two vertices.  This function returns 
        -  an array of these paths, where each path consists of an array of vertex IDs.
        - 
        -  # Arguments
        - Required:
        - - `g::AbstractGraph` : acylic graph. 
        - 
        - ```julia-repl
        - julia> paths = all_paths(g)
        - ```
        - """
       55 function all_paths(g::AbstractGraph{T}) where T
        -     # check that g is acyclic
       55     if is_cyclic(g)
        0         error("all_paths(): input graph has cycles")
        -     end
       55     que = Queue{Array}()
       55     paths = Array[]
       55     sinks = Int[]
      110     for v in vertices(g)
      420         if (length(outneighbors(g,v)) == 0) && (length(inneighbors(g,v)) > 0) # consider only sink vertices with a non-zero in-degree
      478             push!(sinks, v)
        -         end
        -     end
       55     for v in sinks
      113         enqueue!(que, [v])
      389         while !isempty(que) # work backwards from sink v to all sources reachable to v in BFS fashion
      276             x = dequeue!(que) # grab a path from the queue
      552             for (i, u) in enumerate(inneighbors(g, x[1]))  # consider the in-neighbors at the beginning of the current path
      392                 if i == 1 # first neighbor, build onto exising path 
      276                     insert!(x, 1, u)  # prepend vertex u to array x
        -                     # if reached a source vertex, done with the path; otherwise, put it back in queue
      393                     length(inneighbors(g, u)) == 0 ? push!(paths, x) : enqueue!(que, x)
        -                 else # not first neighbor, create a copy of the path
      116                     y = copy(x)
      116                     y[1] = u  # overwrite first element in array
      676                     length(inneighbors(g, u)) == 0 ? push!(paths, y) : enqueue!(que, y)
        -                 end
        -             end
        -         end
        -     end
       55     return paths
        - end
        - 
        - # The longest path from vertx s to any other vertex in a DAG G (not necessarily unique).
        - # Note: in a DAG G, longest paths in G = shortest paths in -G
        - """
        -     longest_path(g, s)
        -     
        - The longest path from vertx s to any other vertex in a acyclic graph `g`.  The longest path
        - is not necessarily unique, i.e., there can be more than one longest path between two vertices.
        - 
        -  # Arguments
        - Required:
        - - `g::AbstractGraph` : acylic graph. 
        - - `s::Int` : index of the source vertex in `g`. 
        - 
        - ```julia-repl
        - julia> path = longest_paths(g, s)
        - ```
        - """
        1 function longest_path(g::AbstractGraph{T}, s::Int) where T
        1     if is_cyclic(g)
        0         error("longest_path(): input graph has cycles")
        -     end
        1     lp = Array{Edge}[]
        1     max = 0
        -     # shortest path from s to all vertices in -G
        1     for path in enumerate_paths(dijkstra_shortest_paths(g, s, -weights(g)))
       12         if length(path) > max
        2             lp = path
        3             max = length(path)
        -         end
        -     end
        1     return lp
        - end
        - 
        - # Find all of the longest paths in an acyclic graph.
        - """
        -     longest_paths(g)
        -     
        - Finds the set of longest paths in `g`, and returns an array of vertex arrays, where each vertex
        - array contains the vertices in a longest path.
        - 
        -  # Arguments
        - Required:
        - - `g::AbstractGraph` : acylic graph. 
        - 
        - ```julia-repl
        - julia> paths = longest_paths(g)
        - ```
        - """
        2 function longest_paths(g::AbstractGraph{T}) where T
        2     if is_cyclic(g)
        0         error("longest_paths(): input graph has cycles")
        -     end
        2     lps = Array[]
        2     max = 0
        2     paths = all_paths(g)
        2     for path in paths  # find length of longest path
       11         length(path) > max ? max = length(path) : nothing
        -     end
        2     for path in paths
       11         length(path) == max ? push!(lps, path) : nothing
        -     end
        2     return lps
        - end
        - 
        - # determine the number of edges crossing a graph cut, where s is the set of vertices on one side of the cut, 
        - # and the other side are the remanining vertices in g.
        - """
        -     edge_crossing(g, s)
        - 
        - Given a graph ``g=(V,E)``,and a set of vertices ``s \\subseteq V``, determine the number of edges  
        - crossing the cut determined by the partition ``(s,V-s)``.
        - 
        -  # Arguments
        - Required:
        - - `g::AbstractGraph` : acylic graph. 
        - - `s::Array{Int}` : array of vertex indicies. 
        - 
        - ```julia-repl
        - julia> cut_size = edge_crossing(g, s)
        - ```
        - """
        - function edge_crossings(g::AbstractGraph{T}, s::Array{Int,1}) where T
        -     total = 0
        -     d = convert(Array{Int,1}, vertices(g)) # collect the graph vertex ids in a integer array
        -     filter!(x->x ∉ s, d)  # remove the vertex ids in s from d
        -     for v in s
        -         total += edge_crossings(g, v, d)
        -     end
        -     return total
        - end
        - 
        - # find number of crossing from a single vertex to all vertices in some vertex set d
        - function edge_crossings(g::AbstractGraph{T}, s::Int, d::Array{Int,1}) where T
        -     total = 0
        -     for v in d
        -         has_edge(g, s, v) ? total += 1 : nothing
        -     end
        -     return total
        - end
