        - ##############################################################
        - # DegreeRequirement data types
        - 
        - # Create an integer data type called Grade
        - Grade = UInt64
        - 
        - # function for converting a letter grade into a integer, divide by 3 to convert to 4-point GPA scale 
       64 function grade(letter_grade::AbstractString)
       64     if letter_grade == "A➕"
        3         return convert(Grade, 13) 
       61     elseif letter_grade == "A"
        2         return convert(Grade, 12) 
       59     elseif letter_grade == "A➖"
        2         return convert(Grade, 11) 
       57     elseif letter_grade == "B➕"
        2         return convert(Grade, 10) 
       55     elseif letter_grade == "B"
        2         return convert(Grade, 9) 
       53     elseif letter_grade == "B➖"
        2         return convert(Grade, 8) 
       51     elseif letter_grade == "C➕"
        2         return convert(Grade, 7) 
       49     elseif letter_grade == "C"
       12         return convert(Grade, 6) 
       37     elseif letter_grade == "C➖"
        2         return convert(Grade, 5) 
       35     elseif letter_grade == "D➕"
        2         return convert(Grade, 4) 
       33     elseif letter_grade == "D"
       25         return convert(Grade, 3) 
        8     elseif letter_grade == "D➖"
        2         return convert(Grade, 2) 
        6     elseif letter_grade == "P"
        1         return convert(Grade, 0) 
        5     elseif letter_grade == "F"
        1         return convert(Grade, 0)  
        4     elseif letter_grade == "I" 
        1         return convert(Grade, 0)  
        3     elseif letter_grade == "WP" 
        1         return convert(Grade, 0)  
        2     elseif letter_grade == "W" 
        1         return convert(Grade, 0)  
        1     elseif letter_grade == "WF" 
        1         return convert(Grade, 0)  
        -     else
        0         error("letter grade $letter_grade is not supported")  
        -     end
        - end
        - 
        - # function for converting an integer letter grade, divide by 3 to convert to 4-point GPA scale 
       12 function grade(int_grade::Grade)
       12     if int_grade == 13
        1         return "A➕" 
       11     elseif int_grade == 12
        1         return "A"
       10     elseif int_grade == 11
        1         return "A➖" 
        9     elseif int_grade == 10
        1         return "B➕" 
        8     elseif int_grade == 9
        1         return "B" 
        7     elseif int_grade == 8
        1         return "B➖"
        6     elseif int_grade == 7
        1         return "C➕" 
        5     elseif int_grade == 6
        1         return "C" 
        4     elseif int_grade == 5
        1         return "C➖" 
        3     elseif int_grade == 4
        1         return "D➕" 
        2     elseif int_grade == 3
        1         return "D" 
        1     elseif int_grade == 2
        1         return "D➖" 
        0     elseif int_grade == 0
        0         return "F" 
        -     else
        0         error("grade value $int_grade is not supported")    
        -     end
        - end
        - 
        - # Data types for requirements:
        - #
        - #                               AbstractRequirement
        - #                                /               \    
        - #                          CourseSet         RequirementSet
        - #
        - # A requirement may involve a set of courses (CourseSet), or a set of requirements (RequirementSet), but not both.
        - """
        - The `AbstractRequirement` data type is used to represent the requirements associated with an academic program. A 
        - reqiurement may consist of either the set of courses that can be used to satisfy the requirement, or a set of 
        - requirements that all must be satisfied. That is, the two possible concrete subtypes of an `AbstractRequirement` 
        - are:
        -  - `CourseSet` : a set of courses that may be used to satisfy a requirement.
        -  - `RequirementSet` : a set of requirements that may be used to satisfied a requirement. The requirement set may 
        -     consist of other RequirementSets or CourseSets (these are the children of the parent `RequirementSet`).
        - 
        - A valid set of requirements for a degree program is created as a tree of requirements, where all leaves in the 
        - tree must be `CourseSet` objects.
        - """
        - abstract type AbstractRequirement end
        - 
        - """
        - The `CourseSet` data type is used to represent the requirements associated with an academic program. A 
        - reqiurement may consist of either the set of courses that can be used to satisfy the requirement, or a set of 
        - requirements that all must be satisfied. That is, a  `Requirement` must be one of two types:
        -  - `course_set` : the set of courses that are used to satisfy the requirement are specifed in the `courses` array.
        -  - `requirement_set` : that set of requirements that must be satisfied are specified in the `requirements` array.
        - 
        - To instantiate a `CourseSet` use:
        - 
        -     CourseSet(name, credit_hours, courses, description)
        - 
        - # Arguments
        - Required:
        - - `name::AbstractString` : the name of the requirement.
        - - `credit_hours::Real` : the number of credit hours associated with the requirement.
        - - `course_reqs::Array{Pair{Course,Grade}} ` : the collection of courses that can be used to satisfy the requirement, 
        -     and the minimum grade required in each.
        - 
        - Keyword:
        - - `description::AbstractString` : A detailed description of the requirement. Default is the empty string.
        - - `course_catalog::CourseCatalog` : Course catalog to draw courses from using the `prefix_regex` and `num_regex` regular 
        -     expressions (positive matches are added to the course_reqs array). Note: both `prefix_regex` and `num_regex` must 
        -     match in order for a course to be added the `course_reqs` array.
        - - `prefix_regex::Regex` : regular expression for matching a course prefix in the course catalog. Default is `".*"`, 
        -     i.e., match any character any number of times.
        - - `num_regex::Regex` : regular expression for matching a course number in the course catalog. Default is `".*"`, 
        -     i.e., match any character any number of times. 
        - - `min_grade::Grade` : The minimum letter grade that must be earned in courses satisfying the regular expressions.
        - - `double_count::Bool` : Specifies whether or not each course in the course set can be used to satisfy other requirements 
        -     that contain any of the courses in this `CourseSet`. Default = false
        - 
        - # Examples:
        - ```julia-repl
        - julia> CourseSet("General Education - Mathematics", 9, courses)
        - ```
        - where `courses` is an array of Course=>Grade `Pairs`, i.e., the set of courses/minimum grades that can satsfy this 
        - degree requirement.
        - """
        - mutable struct CourseSet <: AbstractRequirement
        -     id::Int                             # Unique requirement id
        -     name::AbstractString                # Name of the requirement (must be unique)
        -     description::AbstractString         # Requirement description 
        -     credit_hours::Real                  # The number of credit hours required to satisfy the requirement
        -     course_reqs::Array{Pair{Course, Grade}}  # The courses that the required credit hours may be drawn from, and the minimum grade that must be earned in each
        -     course_catalog::CourseCatalog       # Course catalog to draw courses from using the following regular expressions (positive matches are stored in course_reqs)
        -     prefix_regex::Regex                 # Regular expression for matching a course prefix in the course catalog.  
        -     num_regex::Regex                    # Regular expression for matching a course number in the course catalog, must satisfy both 
        -     min_grade::Grade                    # The minimum letter grade that must be earned in courses satisfying the regular expressions
        -     double_count::Bool                  # Each course in the course set can satisfy any other requirement that has the same course. Default = false
        - 
        -     # Constructor
        -     # A requirement may involve a set of courses, or a set of requirements, but not both
       26     function CourseSet(name::AbstractString, credit_hours::Real, course_reqs::Array{Pair{Course,Grade},1}=Array{Pair{Course,Grade},1}(); description::AbstractString="", 
        -                    course_catalog::CourseCatalog=CourseCatalog("", ""), prefix_regex::Regex=r".^", num_regex::Regex=r".^", course_regex::Regex=r".^",
        -                    min_grade::Grade=grade("D"), double_count::Bool=false)
        -         # r".^" is a regex that matches nothing
       26         this = new()
       13         this.name = name
       13         this.description = description
       13         this.credit_hours = credit_hours  
       13         this.id = mod(hash(this.name * this.description * string(this.credit_hours)), UInt32)
       13         this.course_reqs = course_reqs 
       13         this.course_catalog = course_catalog
       13         this.prefix_regex = prefix_regex
       13         this.num_regex = num_regex
       13         this.double_count = double_count
       15         for c in course_catalog.catalog  # search the supplied course catalog for courses satisfying both prefix and num regular expressions
       14             if occursin(prefix_regex, c[2].prefix) && occursin(num_regex, c[2].num)
       14                 push!(course_reqs, c[2] => min_grade)
        -             end
        -         end
        -         #if this.credit_hours > sum of course credits
        -         #    ## TODO: add this warning if credits are not sufficient
        -         #end
       13         sum = 0
       33         sorted = sort(this.course_reqs; by = x -> x.first.credit_hours, rev = true)
       13         for c in sorted
       20             sum += c.first.credit_hours
       28             sum >= this.credit_hours ? break : nothing 
        -         end
       13         if (sum - this.credit_hours) < 0  # credits provided by courses are not sufficent to satisfy required number of credit hours for this requirement
        1             printstyled("WARNING: Course set $(this.name) is improperly specified, $(this.credit_hours) credits are required, but credits amounting to $sum are available.\nUse is_valid() to check a requirement set for specification errors.\n", color = :yellow)
        -         end
        - 
       13         return this
        -     end
        - end
        - 
        - """
        - The `RequirementSet` data type is used to represent a collection of requirements. To instantiate a `RequirementSet` use:
        - 
        -     RequirementSet(name, credit_hours, requirements, description)
        - 
        - # Arguments
        - Required:
        - - `name::AbstractString` : the name of the degree requirement set.
        - - `credit_hours::Real` : the number of credit hours required in order to satisfy the requirement set.
        - - `requirements::Array{AbstractRequirement}` : the course sets or requirement sets that comprise the requirement set.
        - Keyword:
        - - `description::AbstractString` : the description of the requirement set.
        - - `satisfy::Int` : the number of requirements in the set that must be satisfied.  Default is all.
        - 
        - # Examples:
        - ```julia-repl
        - julia> RequirementSet("General Education Core", 30, requirements)
        - ```
        - where `requirements` is an array of `CourseSet` and/or `RequirementSet` objects.
        - """
        - mutable struct RequirementSet <: AbstractRequirement
        -     id::Int                              # Unique requirement id (internally generated)
        -     name::AbstractString                 # Name of the requirement (must be unique)
        -     description::AbstractString          # Requirement description 
        -     credit_hours::Real                   # The number of credit hours required to satisfy the requirement
        -     requirements::Array{AbstractRequirement}   # The set of requirements (course sets or requirements sets) that define this requirement 
        -     satisfy::Int                         # The number of requirements in the set that must be satisfied.  Default is all.
        -     
        -     # Constructor
       14         function RequirementSet(name::AbstractString, credit_hours::Real, requirements::Array{T,1}; 
        -             description::AbstractString="", satisfy::Int=0) where T <: AbstractRequirement
       14         this = new()
        7         this.name = name
        7         this.description = description
        7         this.credit_hours = credit_hours  
        7         this.id = mod(hash(this.name * this.description * string(this.credit_hours)), UInt32)
        7         this.requirements = requirements
        7         if satisfy < 0
        0             printstyled("WARNING: RequirementSet $(this.name), satisfy cannot be a negative number\n", color = :yellow) 
        7         elseif satisfy == 0
        4             this.satisfy = length(requirements)  # satisfy all requirements
        3         elseif satisfy <= length(requirements)
        3             this.satisfy = satisfy
        -         else # satisfy > length(requirements)
        0             this.satisfy = satisfy
        -             # trying to satisfy more then the # of available sub-requirements
        0             printstyled("WARNING: RequirementSet $(this.name), satisfy variable ($(this.satisfy)) cannot be greater than the number of available requirements ($(length(this.requirements)))\n", color = :yellow)
        -         end
        7         return this
        -     end
        - end
        - 
        - """
        - Determine whether or not a set of requirements contained in a requirements tree rooted at `root` has credit hour 
        - constraints that are possible to satisfy.
        - 
        -     is_valid(root::RequirementSet, errors::IOBuffer)
        - 
        - ```julia-repl
        - julia> errors = IOBuffer()
        - julia> is_valid(root, errors)
        - julia> println(String(take!(errors)))
        - ```
        - 
        - The credit hour constraints associated with particular set of requirements may be specified in a way that 
        - makes them impossible to satsify. This function searches for particular cases of this problem, and if found, 
        - reports them in an error message. 
        - """
        4 function is_valid(root::AbstractRequirement, error_msg::IOBuffer = IOBuffer())
        4     validity = true
        4     reqs = preorder_traversal(root)
        4     dups = nonunique(reqs)
        4     if (length(dups) > 0) # the same requirements is being used multiple times, so it's not a requirments tree
        0         validity = false
        0         write(error_msg, "RequirementSet: $(root.name) is not a tree, it contains duplicate requirements: \n")
        0         for d in dups
        0             write(error_msg,"\t $(d.name)\n")
        -         end
        -     end
        4     for r in reqs
       31         credit_total = 0
       31         if typeof(r) == CourseSet
       24             for c in r.course_reqs
       42                 credit_total += c[1].credit_hours
        -             end
        -             # credit_total = sum(sum(x)->x, ... )  # make above code more compact using map-reduce functionality
       24             if r.credit_hours > credit_total 
        1                 validity = false
        1                 write(error_msg, "CourseSet: $(r.name) is unsatisfiable,\n\t $(r.credit_hours) credits are required from courses having only $(credit_total) credit hours.\n")
        -             end
        -         else # r is a RequirementSet
        7             if (r.satisfy == 0)
        0                 validity = false
        0                 write(error_msg, "RequirementSet: $(r.name) is unsatisfiable, cannot satisfy 0 requirments\n")
        7             elseif (r.satisfy > length(r.requirements))
        0                 validity = false
        0                 write(error_msg, "RequirementSet: $(r.name) is unsatisfiable, satisfy variable cannot be greater than the number of available requirements\n")
        -             else # r.satisy <= number of requirements
        7                 credit_ary = []
        7                 for child in r.requirements
       27                     push!(credit_ary, child.credit_hours)
        -                 end
        7                 max_credits = 0
       14                 for c in combinations(credit_ary, r.satisfy) # find the max. credits possible from r.satisfy number of requirements
       11                         sum(c) > max_credits ? max_credits = sum(c) : nothing
        -                 end
        7                 if r.credit_hours > max_credits
        1                     validity = false
       36                     write(error_msg, "RequirementSet: $(r.name) is unsatisfiable,\n\t $(r.credit_hours) credits are required from sub-requirements that can provide at most $(max_credits) credit hours.\n")
        -                 end
        -             end
        -         end
        -     end
        4     return validity
        - end
        - 
        - # helper function for finding the duplicate elements in an array
        4 function nonunique(x::AbstractArray{T}) where T
        4     uniqueset = Set{T}()
        4     duplicateset = Set{T}()
        4     for i in x
       31         if (i in uniqueset)
        0             push!(duplicateset, i)
        -         else
       35             push!(uniqueset, i)
        -         end
        -     end
        4     collect(duplicateset)
        - end
