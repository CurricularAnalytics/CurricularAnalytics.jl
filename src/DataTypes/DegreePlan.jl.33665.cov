        - ##############################################################
        - # Term data type
        - """
        - The `Term` data type is used to represent a single term within a `DegreePlan`. To 
        - instantiate a `Term` use:
        - 
        -     Term([c1, c2, ...])
        - 
        - where c1, c2, ... are `Course` data objects
        - """
        - mutable struct Term
        -     courses::Array{AbstractCourse}      # The courses associated with a term in a degree plan
        -     num_courses::Int                    # The number of courses in the Term
        -     credit_hours::Real                  # The number of credit hours associated with the term
        -     metrics::Dict{String, Any}          # Term-related metrics
        -     metadata::Dict{String, Any}         # Term-related metadata
        - 
        -     # Constructor
       27     function Term(courses::Array{AbstractCourse})
       27         this = new()
       27         this.num_courses = length(courses)
       27         this.courses = Array{AbstractCourse}(undef, this.num_courses)
       27         this.credit_hours = 0
       54         for i = 1:this.num_courses
       62             this.courses[i] = courses[i]
       97             this.credit_hours += courses[i].credit_hours
        -         end
       27         this.metrics = Dict{String, Any}()
       27         this.metadata = Dict{String, Any}()
       27         return this
        -     end
        - 
       21     function Term(courses::Array{Course})
       21         Term(convert(Array{AbstractCourse}, courses))
        -     end
        - 
        - end
        - 
        - ##############################################################
        - # Degree Plan data type
        - """
        - The `DegreePlan` data type is used to represent the collection of courses that must be
        - be completed in order to earn a particualr degree.  To instantiate a `Curriculum` use:
        - 
        -     DegreePlan(name, curriculum, terms, additional_courses)
        - 
        - # Arguments
        - - `name::AbstractString` : the name of the degree plan.
        - - `curriculum::Curriculum` : the curriculum the degree plan must satisfy.
        - - `terms::Array{Term}` : the arrangement of terms associated with the degree plan.
        - - `additional_courses::Array{Course}` : additional courses in the degree plan that are not
        -    a part of the curriculum. E.g., a prerequisite math class to the first required math
        -    class in the curriculum.
        - 
        - # Examples:
        - ```julia-repl
        - julia> DegreePlan("Biology 4-year Degree Plan", curriculum, terms)
        - ```
        - """
        - mutable struct DegreePlan
        -     name::AbstractString                # Name of the degree plan
        -     curriculum::Curriculum              # Curriculum the degree plan satisfies
        -     additional_courses::Array{AbstractCourse}   # Additional (non-required) courses added to the degree plan,
        -                                         # e.g., these may be preparatory courses
        -     graph::SimpleDiGraph{Int}           # Directed graph representation of pre-/co-requisite structure 
        -                                         # of the degre plan
        -     terms::Array{Term}                  # The terms associated with the degree plan
        -     num_terms::Int                      # Number of terms in the degree plan
        -     credit_hours::Real                  # Total number of credit hours in the degree plan
        -     metrics::Dict{String, Any}          # Dergee Plan-related metrics
        -     metadata::Dict{String, Any}         # Dergee Plan-related metadata
        - 
        -     # Constructor
       16     function DegreePlan(name::AbstractString, curriculum::Curriculum, terms::Array{Term,1},
        -                         additional_courses::Array{<:AbstractCourse,1}=Array{AbstractCourse,1}())
       16         this = new()
        9         this.name = name
        9         this.curriculum = curriculum
        9         this.num_terms = length(terms)
        9         this.terms = Array{Term}(undef, this.num_terms)
        9         this.credit_hours = 0
       18         for i = 1:this.num_terms
       28             this.terms[i] = terms[i]
       47             this.credit_hours += terms[i].credit_hours
        -         end
       17         if isassigned(additional_courses)
        1             this.additional_courses = Array{AbstractCourse}(undef, length(additional_courses))
        2             for i = 1:length(additional_courses)
        7                 this.additional_courses[i] = additional_courses[i]
        -             end
        -         end
        9         this.metrics = Dict{String, Any}()
        9         this.metadata = Dict{String, Any}()
        9         return this
        -     end
        - end
        - 
        - # Check if a degree plan is valid.
        - # Print error_msg using println(String(take!(error_msg))), where error_msg is the buffer returned by this function
        - """
        -     is_valid(plan::DegreePlan, errors::IOBuffer)
        - 
        - Tests whether or not the degree plan `plan` is valid.  Returns a boolean value, with `true` indicating the 
        - degree plan is valid, and `false` indicating it is not.
        - 
        - If `plan` is not valid, the reason(s) why are written to the `errors` buffer. To view these 
        - reasons, use:
        - 
        - ```julia-repl
        - julia> errors = IOBuffer()
        - julia> is_valid(plan, errors)
        - julia> println(String(take!(errors)))
        - ```
        - 
        - There are three reasons why a degree plan might not be valid:
        - 
        - - Requisites not satsified : A prerequisite for a course occurs in a later term than the course itself.
        - - Incomplete plan : There are course in the curriculum not included in the degree plan.
        - - Redundant plan : The same course appears in the degree plan multiple times. 
        - 
        - """
        6 function is_valid(plan::DegreePlan, error_msg::IOBuffer=IOBuffer())
        6     validity = true
        -     # All requisite relationships are satisfied?
        -     #  -no backwards pointing requisites 
        6     for i in 2:plan.num_terms
        5         for c in plan.terms[i].courses
       20             for j in i-1:-1:1
       14                 for k in plan.terms[j].courses
       28                     for l in keys(k.requisites) 
        6                         if l == c.id 
        1                             validity = false
        3                             write(error_msg, "\n-Invalid requisite: $(c.name) in term $i is a requisite for $(k.name) in term $j")
        -                         end
        -                     end 
        -                 end
        -             end
        -         end
        -     end
        -     #  -requisites within the same term must be corequisites
        6     for i in 1:plan.num_terms
        8         for c in plan.terms[i].courses
       16             for r in plan.terms[i].courses
       32                 if c == r
       16                     continue
       16                 elseif haskey(c.requisites, r.id) 
        2                     if c.requisites[r.id] == pre
        0                         validity = false
       37                         write(error_msg, "\n-Invalid prerequisite: $(r.name) in term $i is a prerequisite for $(c.name) in the same term")
        -                     end
        -                 end
        -             end
        -         end
        -     end
        -     #  -TODO: strict co-requisites must be in the same term
        -     # All courses in the curriculum are in the degree plan?
        3     curric_classes = Set()
        3     dp_classes = Set()
        3     for i in plan.curriculum.courses
       21         push!(curric_classes, i.id)  
        -     end
        6     for i = 1:plan.num_terms
        8         for j in plan.terms[i].courses
       21             push!(dp_classes, j.id)
        -         end
        -     end
        3     if length(setdiff(curric_classes, dp_classes)) > 0
        1         validity = false
        2         for i in setdiff(curric_classes, dp_classes)
        2             c = course_from_id(plan.curriculum, i)
        4             write(error_msg, "\n-Degree plan is missing required course: $(c.name)")
        -         end
        -     end
        -     # Is a course in the degree plan multiple times?
        3     dp_classes = Set()
        6     for i = 1:plan.num_terms
        8         for j in plan.terms[i].courses
       16             if in(j.id, dp_classes)
        0                 validity = false
        0                 write(error_msg, "\n-Course $(j.name) is listed multiple times in degree plan")
        -             else
       21                 push!(dp_classes, j.id)
        -             end
        -         end
        -     end 
        3     return validity 
        - end
        - 
        - # TODO: This function should be depracated on next major version release
        - function isvalid_degree_plan(plan::DegreePlan, error_msg::IOBuffer=IOBuffer())
        -     println("isvalid_degree_plan() will be depracated, use is_valid() instead.")
        -     return is_valid(plan, error_msg)
        - end
        - 
        - """
        -     find_term(plan::DegreePlan, course::Course)
        - 
        - In degree plan `plan`, find the term in which course `course` appears.  If `course` in not in the degree plan an
        - error message is provided.
        - """
       25 function find_term(plan::DegreePlan, course::Course)
       25     for (i, term) in enumerate(plan.terms)
       45         if course in term.courses
       25             return i
        -         end
        -     end
        0     write(error_msg, "Course $(course.name) is not in the degree plan")
        - end
        - 
        - # ugly print of degree plan 
        - """
        -     print_plan(plan::DegreePlan) 
        - 
        - Ugly print out of a degree plan to the Julia console.
        - """
        1 function print_plan(plan::DegreePlan)
        1     println("\nDegree Plan: $(plan.name) for $(plan.curriculum.degree_type) in $(plan.curriculum.name)\n")
        1     println(" $(plan.credit_hours) credit hours")
        2     for i = 1:plan.num_terms
        3         println(" Term $i courses:")
        3         for j in plan.terms[i].courses
        9             println(" $(j.name) ")
        -         end
        3         println("\n")
        -     end
        - end
