        - ##############################################################
        - # Curriculum data type
        - # The required curriculum associated with a degree program
        - """
        - The `Curriculum` data type is used to represent the collection of courses that must be
        - be completed in order to earn a particualr degree. Thus, we use the terms *curriculum* and
        - *degree program* synonymously. To instantiate a `Curriculum` use:
        - 
        -     Curriculum(name, courses; <keyword arguments>)
        - 
        - # Arguments
        - Required:
        - - `name::AbstractString` : the name of the curriculum.
        - - `courses::Array{Course}` : the collection of required courses that comprise the curriculum.
        - Keyword:
        - - `degree_type::AbstractString` : the type of degree, e.g. BA, BBA, BSc, BEng, etc.
        - - `institution:AbstractString` : the name of the institution offering the curriculum.
        - - `system_type::System` : the type of system the institution uses, allowable 
        -     types: `semester` (default), `quarter`.
        - - `CIP::AbstractString` : the Classification of Instructional Programs (CIP) code for the 
        -     curriculum.  See: `https://nces.ed.gov/ipeds/cipcode`
        - 
        - # Examples:
        - ```julia-repl
        - julia> Curriculum("Biology", courses, institution="South Harmon Tech", degree_type=AS, CIP="26.0101")
        - ```
        - """
        - mutable struct Curriculum
        -     id::Int                             # Unique curriculum ID
        -     name::AbstractString                # Name of the curriculum (can be used as an identifier)
        -     institution::AbstractString         # Institution offering the curriculum
        -     degree_type::AbstractString                 # Type of degree_type
        -     system_type::System                 # Semester or quarter system
        -     CIP::AbstractString                 # CIP code associated with the curriculum
        -     courses::Array{AbstractCourse}              # Array of required courses in curriculum
        -     num_courses::Int                    # Number of required courses in curriculum
        -     credit_hours::Real                  # Total number of credit hours in required curriculum
        -     graph::SimpleDiGraph{Int}           # Directed graph representation of pre-/co-requisite structure
        -                                         # of the curriculum, note: this is a course graph
        -     learning_outcomes::Array{LearningOutcome}  # A list of learning outcomes associated with the curriculum
        -     learning_outcome_graph::SimpleDiGraph{Int}        # Directed graph representatin of pre-/co-requisite structure of learning
        -                                         # outcomes in the curriculum
        -     course_learning_outcome_graph::MetaDiGraph{Int}  # Directed Int64 metagraph with Float64 weights defined by :weight (default weight 1.0) 
        -                                         # This is a course and learning outcome graph                                             
        -     metrics::Dict{String, Any}          # Curriculum-related metrics
        -     metadata::Dict{String, Any}         # Curriculum-related metadata
        - 
        -     # Constructor
       42     function Curriculum(name::AbstractString, courses::Array{AbstractCourse}; learning_outcomes::Array{LearningOutcome}=Array{LearningOutcome,1}(),
        -                         degree_type::AbstractString="BS", system_type::System=semester, institution::AbstractString="", CIP::AbstractString="", 
        -                         id::Int=0, sortby_ID::Bool=true)
       42         this = new()
       21         this.name = name
       21         this.degree_type = degree_type
       21         this.system_type = system_type
       21         this.institution = institution
       21         if id == 0
       21             this.id = mod(hash(this.name * this.institution * string(this.degree_type)), UInt32)
        -         else 
        0             this.id = id
        -         end
       21         this.CIP = CIP
       21         if sortby_ID
     1081             this.courses = sort(collect(courses), by = c -> c.id)
        -         else
        8             this.courses = courses
        -         end
       21         this.num_courses = length(this.courses)
       21         this.credit_hours = total_credits(this)
       21         this.graph = SimpleDiGraph{Int}()
       21         create_graph!(this)
       21         this.metrics = Dict{String, Any}()
       21         this.metadata = Dict{String, Any}()
       21         this.learning_outcomes = learning_outcomes
       21         this.learning_outcome_graph = SimpleDiGraph{Int}()
       21         create_learning_outcome_graph!(this)
       21         this.course_learning_outcome_graph = MetaDiGraph()
       21         create_course_learning_outcome_graph!(this)       
       21         errors = IOBuffer()
       21         if !(is_valid(this, errors))
        3             printstyled("WARNING: Curriculum was created, but is invalid due to requisite cycle(s):", color = :yellow)
        3             println(String(take!(errors)))
        -         end
       21         return this
        -     end
        - 
       42     function Curriculum(name::AbstractString, courses::Array{Course}; learning_outcomes::Array{LearningOutcome}=Array{LearningOutcome,1}(),
        -         degree_type::AbstractString="BS", system_type::System=semester, institution::AbstractString="", CIP::AbstractString="", 
        -         id::Int=0, sortby_ID::Bool=true)
       42         Curriculum(name, convert(Array{AbstractCourse},courses), learning_outcomes=learning_outcomes, degree_type=degree_type, 
        -               system_type=system_type, institution=institution, CIP=CIP, id=id, sortby_ID=sortby_ID)
        -     end
        - end
        - 
        - # Check if a curriculum graph has requisite cycles.
        - """
        -     is_valid(c::Curriculum, errors::IOBuffer)
        - 
        - Tests whether or not the curriculum graph ``G_c`` associated with curriculum `c` is valid, i.e.,
        - whether or not it contains a requisite cycle, or requisites that cannot be satisfied.  Returns  
        - a boolean value, with `true` indicating the curriculum is valid, and `false` indicating it is not.
        - 
        - If ``G_c`` is not valid, the `errors` buffer. To view these errors, use:
        - 
        - ```julia-repl
        - julia> errors = IOBuffer()
        - julia> is_valid(c, errors)
        - julia> println(String(take!(errors)))
        - ```
        - 
        - A curriculum graph is not valid if it contains a directed cycle or unsatisfiable requisites; in this 
        - case it is not possible to complete the curriculum. For the case of unsatisfiable requistes, consider
        - two courses ``c_1`` and ``c_2``, with ``c_1`` a prerequisite for ``c_2``. If a third course ``c_3`` 
        - is a strict corequisite for ``c_2``, as well as a requisite for ``c_1`` (or a requisite for any course 
        - on a path leading to ``c_2``), then the set of requisites cannot be satisfied.
        - """
       27 function is_valid(c::Curriculum, error_msg::IOBuffer=IOBuffer())
       27     g = deepcopy(c.graph)
       27     validity = true
        -     # First check for simple cycles
       27     cycles = simplecycles(g)
        -     # Next check for cycles that could be created by strict co-requisites.
        -     # For every strict-corequisite in the curriculum, add another strict-corequisite between the same two vertices, but in 
        -     # the opposite direction. If this creates any cycles of length greater than 2 in the modified graph (i.e., involving
        -     # more than the two courses in the strict-corequisite relationship), then the curriculum is unsatisfiable.
       27     for course in c.courses
      269         for (k,r) in course.requisites
      250             if r == strict_co
       27                 v_d = course_from_id(c,course.id).vertex_id[c.id] # destination vertex
       27                 v_s = course_from_id(c,k).vertex_id[c.id] # source vertex
       54                 add_edge!(g, v_d, v_s)
        -             end
        -         end
        -     end
       27     new_cycles = simplecycles(g)
       27     idx = []
       38     for (i,cyc) in enumerate(new_cycles)  # remove length-2 cycles
       35         if length(cyc) == 2
       51             push!(idx, i)
        -         end
        -     end
       27     deleteat!(new_cycles, idx)
       27     cycles = union(new_cycles, cycles) # remove redundant cycles
       27     if length(cycles) != 0
        6         validity = false
        6         c.institution != "" ? write(error_msg, "\n$(c.institution): ") : "\n"
        6         write(error_msg, " curriculum \'$(c.name)\' has requisite cycles:\n")
        6         for cyc in cycles
        8             write(error_msg, "(")
       16             for (i,v) in enumerate(cyc)
       20                 if i != length(cyc)
       12                     write(error_msg, "$(c.courses[v].name), ")
        -                 else
       26                     write(error_msg, "$(c.courses[v].name))\n")
        -                 end
        -             end
        -         end
        -     end
       27     return validity
        - end
        - 
        - # TODO: This function should be depracated on next major version release
        - function isvalid_curriculum(c::Curriculum, error_msg::IOBuffer=IOBuffer())
        -     println("isvalid_curriculum() will be depracated, use is_valid() instead.")
        -     return is_valid(c, error_msg)
        - end
        - 
        - # TODO: update a curriculum graph if requisites have been added/removed or courses have been added/removed
        - #function update_curriculum(curriculum::Curriculum, courses::Array{Course}=())
        - #    # if courses array is empty, no new courses were added
        - #end
        - 
        - # Converts course ids, from those used in CSV file format, to the standard hashed id used by the data structures in the toolbox
        2 function convert_ids(curriculum::Curriculum)
        2     for c1 in curriculum.courses
       20         old_id = c1.id
       20         c1.id = mod(hash(c1.name * c1.prefix * c1.num * c1.institution), UInt32)
       20         if old_id != c1.id 
       12             for c2 in curriculum.courses
      144                 if old_id in keys(c2.requisites)
        8                     add_requisite!(c1, c2, c2.requisites[old_id])
       10                     delete!(c2.requisites, old_id)
        -                 end
        -             end
        -         end
        -     end
        2     return curriculum
        - end
        - 
        - # Map course IDs to vertex IDs in an underlying curriculum graph.
       43 function map_vertex_ids(curriculum::Curriculum)
       43     mapped_ids = Dict{Int, Int}()
       43     for c in curriculum.courses
      433         mapped_ids[c.id] = c.vertex_id[curriculum.id]
        -     end
       43     return mapped_ids
        - end
        - 
        - # Map lo IDs to vertex IDs in an underlying curriculum graph.
       42 function map_lo_vertex_ids(curriculum::Curriculum)
       42     mapped_ids = Dict{Int, Int}()
       84     for lo in curriculum.learning_outcomes
        0         mapped_ids[lo.id] = lo.vertex_id[curriculum.id]
        -     end
       42     return mapped_ids
        - end
        - 
        - # Compute the hash value used to create the id for a course, and return the course if it exists in the curriculum supplied as input
        2 function course(curric::Curriculum, prefix::AbstractString, num::AbstractString, name::AbstractString, institution::AbstractString)
        2     hash_val = mod(hash(name * prefix * num * institution), UInt32)
        2     if hash_val in collect(c.id for c in curric.courses)
        8         return curric.courses[findfirst(x->x.id==hash_val, curric.courses)]
        -     else
        0         error("Course: $prefix $num: $name at $institution does not exist in curriculum: $(curric.name)")
        -     end
        - end
        - 
        - # Return the course associated with a course id in a curriculum
       69 function course_from_id(curriculum::Curriculum, id::Int)
       69     for c in curriculum.courses
     1009         if c.id == id
       69             return c
        -         end
        -     end
        - end
        - 
        - # Return the lo associated with a lo id in a curriculum
        0 function lo_from_id(curriculum::Curriculum, id::Int)
        0     for lo in curriculum.learning_outcomes
        0         if lo.id == id
        0             return lo
        -         end
        -     end
        - end
        - 
        - # Return the course associated with a vertex id in a curriculum graph
       17 function course_from_vertex(curriculum::Curriculum, vertex::Int)
       17     c = curriculum.courses[vertex]
        - end
        - 
        - # The total number of credit hours in a curriculum
       22 function total_credits(curriculum::Curriculum)
       22     total_credits = 0
       22     for c in curriculum.courses
      221         total_credits += c.credit_hours
        -     end
       22     return total_credits
        - end
        - 
        - #"""
        - #    create_graph!(c::Curriculum)
        - #
        - #Create a curriculum directed graph from a curriculum specification. The graph is stored as a 
        - #LightGraph.jl implemenation within the Curriculum data object.
        - #"""
       21 function create_graph!(curriculum::Curriculum)
       21     for (i, c) in enumerate(curriculum.courses)
      191         if add_vertex!(curriculum.graph)
      191             c.vertex_id[curriculum.id] = i    # The vertex id of a course w/in the curriculum
        -                                               # Graphs.jl orders graph vertices sequentially
        -                                               # TODO: make sure course is not alerady in the curriculum   
        -         else
      191             error("vertex could not be created")
        -         end
        -     end
       21     mapped_vertex_ids = map_vertex_ids(curriculum)
       21     for c in curriculum.courses
      191         for r in collect(keys(c.requisites))
      166             if add_edge!(curriculum.graph, mapped_vertex_ids[r], c.vertex_id[curriculum.id])
        -             else
        0                 s = course_from_id(curriculum, r)
      166                 error("edge could not be created: ($(s.name), $(c.name))")
        -             end
        -         end
        -     end
        - end
        - 
        - #"""
        - #    create_course_learning_outcome_graph!(c::Curriculum)
        - #
        - #Create a curriculum directed graph from a curriculum specification. This graph graph contains courses and learning outcomes
        - # of the curriculum. The graph is stored as a LightGraph.jl implemenation within the Curriculum data object.
        - 
        - 
        - #"""
       21 function create_course_learning_outcome_graph!(curriculum::Curriculum)
       21     len_courses = size(curriculum.courses)[1]
       21     len_learning_outcomes = size(curriculum.learning_outcomes)[1]
        - 
       21     for (i, c) in enumerate(curriculum.courses)
      191         if add_vertex!(curriculum.course_learning_outcome_graph)
      191             c.vertex_id[curriculum.id] = i    # The vertex id of a course w/in the curriculum
        -                                               # Graphs.jl orders graph vertices sequentially
        -                                               # TODO: make sure course is not alerady in the curriculum   
        -         else
      191             error("vertex could not be created")
        -         end
        - 
        -     end
        - 
       21     for (j, lo) in enumerate(curriculum.learning_outcomes)
        0         if add_vertex!(curriculum.course_learning_outcome_graph)
        0             lo.vertex_id[curriculum.id] = len_courses + j   # The vertex id of a learning outcome w/in the curriculum
        -                                                             # Graphs.jl orders graph vertices sequentially
        -                                                             # TODO: make sure course is not alerady in the curriculum   
        -         else
        0             error("vertex could not be created")
        -         end
        -     end
        - 
       21     mapped_vertex_ids = map_vertex_ids(curriculum)
       21     mapped_lo_vertex_ids = map_lo_vertex_ids(curriculum)
        - 
        - 
        -     # Add edges among courses
       21     for c in curriculum.courses
      191         for r in collect(keys(c.requisites))
      166             if add_edge!(curriculum.course_learning_outcome_graph, mapped_vertex_ids[r], c.vertex_id[curriculum.id])               
      166                 set_prop!(curriculum.course_learning_outcome_graph, Edge(mapped_vertex_ids[r], c.vertex_id[curriculum.id]), :c_to_c, c.requisites[r])
        - 
        -             else
        0                 s = course_from_id(curriculum, r)
      187                 error("edge could not be created: ($(s.name), $(c.name))")
        -             end
        -         end
        -     end
        - 
        -     # Add edges among learning_outcomes
       42     for lo in curriculum.learning_outcomes
        0         for r in collect(keys(lo.requisites))
        0             if add_edge!(curriculum.course_learning_outcome_graph, mapped_lo_vertex_ids[r], lo.vertex_id[curriculum.id])
        0                 set_prop!(curriculum.course_learning_outcome_graph, Edge(mapped_lo_vertex_ids[r], lo.vertex_id[curriculum.id]), :lo_to_lo, pre)
        -             else
        0                 s = lo_from_id(curriculum, r)
        0                 error("edge could not be created: ($(s.name), $(c.name))")
        -             end
        -         end
        -     end
        - 
        -     # Add edges between each pair of a course and a learning outcome
       21     for c in curriculum.courses
      191         for lo in c.learning_outcomes
        0             if add_edge!(curriculum.course_learning_outcome_graph, mapped_lo_vertex_ids[lo.id], c.vertex_id[curriculum.id])
        0                 set_prop!(curriculum.course_learning_outcome_graph, Edge(mapped_lo_vertex_ids[lo.id], c.vertex_id[curriculum.id]), :lo_to_c, belong_to)
        -             else
        0                 s = lo_from_id(curriculum, lo.id)
        0                 error("edge could not be created: ($(s.name), $(c.name))")
        -             end
        -         end
        -     end
        - end
        - 
        - #"""
        - #    create_learning_outcome_graph!(c::Curriculum)
        - #
        - #Create a curriculum directed graph from a curriculum specification. The graph is stored as a 
        - #LightGraph.jl implemenation within the Curriculum data object.
        - #"""
       21 function create_learning_outcome_graph!(curriculum::Curriculum)
       21     for (i, lo) in enumerate(curriculum.learning_outcomes)
        0         if add_vertex!(curriculum.learning_outcome_graph)
        0             lo.vertex_id[curriculum.id] = i   # The vertex id of a course w/in the curriculum
        -                                               # Graphs.jl orders graph vertices sequentially
        -                                               # TODO: make sure course is not alerady in the curriculum   
        -         else
        0             error("vertex could not be created")
        -         end
        -     end
       21     mapped_vertex_ids = map_lo_vertex_ids(curriculum)
       42     for lo in curriculum.learning_outcomes
        0         for r in collect(keys(lo.requisites))
        0             if add_edge!(curriculum.learning_outcome_graph, mapped_vertex_ids[r], lo.vertex_id[curriculum.id])
        -             else
        0                 s = lo_from_id(curriculum, r)
        0                 error("edge could not be created: ($(s.name), $(c.name))")
        -             end
        -         end
        -     end
        - end
        - 
        - # find requisite type from vertex ids in a curriculum graph
        2 function requisite_type(curriculum::Curriculum, src_course_id::Int, dst_course_id::Int)
        4     src = 0; dst = 0
        2     for c in curriculum.courses
       16         if c.vertex_id[curriculum.id] == src_course_id
        2             src = c
       14         elseif c.vertex_id[curriculum.id] == dst_course_id
       20             dst = c
        -         end
        -     end
        4     if ((src == 0 || dst == 0) || !haskey(dst.requisites, src.id))
        0         error("edge ($src_course_id, $dst_course_id) does not exist in curriculum graph")
        -     else
        2         return dst.requisites[src.id]
        -     end
        - end
