        - ##############################################################
        - # Course Catalog data type
        - # Stores the collection of courses available at an institution
        - mutable struct CourseCatalog
        -     id::Int                             # Unique course catalog ID
        -     name::AbstractString                # Name of the course catalog
        -     institution::AbstractString         # Institution offering the courses in the catalog 
        -     date_range::Tuple                   # range of dates the catalog is applicable over
        -     catalog::Dict{Int, Course}          # dictionary of courses in (course_id, course) format
        - 
        -     # Constructor
       28     function CourseCatalog(name::AbstractString, institution::AbstractString; courses::Array{Course}=Array{Course,1}(), 
        -                    catalog::Dict{Int,Course}=Dict{Int,Course}(), date_range::Tuple=(), id::Int=0)
       28         this = new()
       14         this.name = name
       14         this.institution = institution
       14         this.catalog = catalog
       14         this.date_range = date_range
       14         this.id = mod(hash(this.name * this.institution), UInt32)
       14         length(courses) > 0 ? add_course!(this, courses) : nothing
       14         return this
        -     end
        - end
        - 
        - # add a course to a course catalog, if the course is already in the catalog, it is not added again
        7 function add_course!(cc::CourseCatalog, course::Course)
        7     !is_duplicate(cc, course) ? cc.catalog[course.id] = course : nothing
        - end
        - 
        5 function add_course!(cc::CourseCatalog, courses::Array{Course,1})
        5     for course in courses
        7         add_course!(cc, course)
        -     end
        - end
        - 
        9 function is_duplicate(cc::CourseCatalog, course::Course)
       16     course.id in keys(cc.catalog) ? true : false
        - end
        - 
        - function course(catalog::CourseCatalog, prefix::AbstractString, num::AbstractString)
        -     index = findfirst(c -> c.prefix == prefix && c.num == num, catalog.catalog)
        -     if index === nothing
        -         return false
        -     end
        -     return catalog.catalog[index]
        - end
        - 
        - # Return a course in a course catalog
        1 function course(cc::CourseCatalog, prefix::AbstractString, num::AbstractString, name::AbstractString)
        1     hash_val = mod(hash(name * prefix * num * cc.institution), UInt32)
        1     if hash_val in keys(cc.catalog)
        1         return cc.catalog[hash_val]
        -     else
        0         error("Course: $prefix $num: $name at $(cc.institution) does not exist in catalog: $(cc.name)")
        -     end
        - end
