        6 function readfile(file_path)
        6     open(file_path) do f 
        6         lines = readlines(f)
        6         return lines
        -     end
        - end
        - 
        6 function remove_empty_lines(file_path)
       12     if file_path[end-3:end] != ".csv"
        0         println("Input is not a csv file")
        0         return false
        -     end
       12     temp_file = file_path[1:end-4] * "_temp.csv"
        6     file = readfile(file_path)
        6     open(temp_file, "w") do f  
        6         new_file = ""
        6         for line in file
      149             line = replace(line, "\r" => "")
      298             if length(line) > 0 && !startswith(replace(line,"\""=>""), "#")
      149                 line = line * "\n"
      155                 new_file = new_file * line
        -             end
        -         end
        6         if length(new_file) > 0
        6             new_file = chop(new_file)
        -         end
        6         write(f,new_file)
        -     end
        6     return temp_file
        - end
        - 
        - function find_courses(courses, course_id)
        -     for course in courses
        -         if course_id == course.id
        -             return true
        -         end
        -     end
        -     return false
        - end
        - 
       24 function course_line(course, term_id; metrics=false)
       24     course_ID = course.id
       12     course_name = course.name
       12     course_prefix = course.prefix
       12     course_num = course.num
       12     course_vertex = course.vertex_id 
       12     course_prereq = "\""
       12     course_coreq = "\""
       12     course_scoreq = "\""
       18     for requesite in course.requisites
       10         if requesite[2] == pre
        8             course_prereq = course_prereq * string(requesite[1]) * ";"
        2         elseif requesite[2] == co
        2             course_coreq = course_coreq * string(requesite[1]) * ";"
        0         elseif requesite[2] == strict_co
       14             course_scoreq = course_scoreq * string(requesite[1]) * ";"
        -         end
        -     end
       12     course_prereq = chop(course_prereq)
       12     if length(course_prereq) > 0
        6         course_prereq = course_prereq * "\""
        -     end
       12     course_coreq = chop(course_coreq)
       12     if length(course_coreq) > 0
        2         course_coreq = course_coreq * "\""
        -     end
       12     course_scoreq = chop(course_scoreq)
       12     if length(course_scoreq) > 0
        0         course_scoreq = course_scoreq * "\""
        -     end                           
       12     course_chours = course.credit_hours
       12     course_inst = course.institution
       12     course_canName = course.canonical_name
       12     course_term = typeof(term_id) == Int ? string(term_id) : term_id
       18     course_term = course_term == "" ? "" : course_term * ","
       12     if metrics == false
       12         c_line= "\n" * string(course_ID) * ",\"" * string(course_name) * "\",\"" * string(course_prefix) * "\",\""  *
        -                     string(course_num) * "\"," * string(course_prereq) * "," * string(course_coreq) * "," *
        -                     string(course_scoreq) * "," * string(course_chours) *",\""* string(course_inst) * "\",\"" *
        -                     string(course_canName) * "\"," * course_term
        -     else
        -         # protect against missing metrics values in course
        0         if !haskey(course.metrics, "complexity") || !haskey(course.metrics, "blocking factor") || !haskey(course.metrics, "delay factor") || !haskey(course.metrics, "centrality")
        0             error("Cannot call course_line(;metrics=true) if the curriculum's courses do not have complexity, blocking factor, delay factor, and centrality values stored in their metrics dictionary.")
        -         end
        0         complexity = course.metrics["complexity"]
        0         blocking_factor = course.metrics["blocking factor"]
        0         delay_factor = course.metrics["delay factor"]
        0         centrality = course.metrics["centrality"]
        0         c_line= "\n" * string(course_ID) * ",\"" * string(course_name) * "\",\"" * string(course_prefix) * "\",\""  *
        -                     string(course_num) * "\"," * string(course_prereq) * "," * string(course_coreq) * "," *
        -                     string(course_scoreq) * "," * string(course_chours) *",\""* string(course_inst) * "\",\"" *
        -                     string(course_canName) * "\"," * course_term * string(complexity) * "," * string(blocking_factor) * "," * 
        -                     string(delay_factor) * "," * string(centrality)
        -     end
       12     return c_line 
        - end
        - 
      155 function csv_line_reader(line::AbstractString, delimeter::Char=',')
      155     quotes = false
      155     result = String[]
      155     item = ""
      304     for ch in line
     9134         if ch == '"'
      156             quotes != quotes
     8978         elseif ch == delimeter && !quotes
     1457             push!(result,item)
     1457             item = ""
        -         else
    25640             item = item * string(ch)
        -         end
        -     end
      155     if length(item) > 0
       92         push!(result, item)
        -     end
        -     # check if the bounds o
      161     if isassigned(result, 1)
      149         if occursin("\ufeff", result[1])
        0             result[1] = replace(result[1], "\ufeff" => "")
        -         end
        -     end
      155     return result
        - end
        - 
      868 function find_cell(row, header)
     5002     if !(string(header) in names(row)) #I assume this means if header is not in names 
        0         error("$(header) column is missing")
     1736     elseif typeof(row[header]) == Missing
      329         return ""
        -     else
      539         return row[header]
        -     end
        - end
        - 
        6 function read_all_courses(df_courses::DataFrame, lo_Course:: Dict{Int, Array{LearningOutcome}}=Dict{Int, Array{LearningOutcome}}())
        6     course_dict = Dict{Int, Course}()
       12     for row in DataFrames.eachrow(df_courses)
      206         c_ID = row[Symbol("Course ID")]
      103         c_Name = find_cell(row, Symbol("Course Name"))
      206         c_Credit = row[Symbol("Credit Hours")] 
      103         c_Credit = typeof(c_Credit) == String ? parse(Float64, c_Credit) : c_Credit
      103         c_Prefix = string(find_cell(row, Symbol("Prefix")))
      103         c_Number = find_cell(row, Symbol("Number"))
      103         if typeof(c_Number) != String 
        0             c_Number = string(c_Number) 
        -         end
      103         c_Inst = ""
      103         c_col_name = ""
      103         try
      103             c_Inst = find_cell(row, Symbol("Institution"))
      103             c_col_name = find_cell(row, Symbol("Canonical Name"))
        -         catch
        0             nothing
        -         end
        -         
      309         learning_outcomes = if c_ID in keys(lo_Course) lo_Course[c_ID] else LearningOutcome[] end
      103         if c_ID in keys(course_dict)
        0             println("Course IDs must be unique")
        0             return false
        -         else
      200             course_dict[c_ID] = Course(c_Name, c_Credit, prefix=c_Prefix, learning_outcomes=learning_outcomes,
        -                                        num=c_Number, institution=c_Inst, canonical_name=c_col_name, id=c_ID)
        -         end
        -     end
       12     for row in DataFrames.eachrow(df_courses)
      206         c_ID = row[Symbol("Course ID")]
      103         pre_reqs = find_cell(row, Symbol("Prerequisites"))
      103         if pre_reqs != "" && pre_reqs != " " && pre_reqs != ' '
       96             if last(pre_reqs, 1) == ";" || last(pre_reqs, 1) == " "
        0                 pre_reqs = pre_reqs[1:end-1]
        -             end
        -             # check if pre_reqs string contains a comma
       48             if occursin(",", string(pre_reqs))
        0                 split_prereqs = split(string(pre_reqs), ",")
        -             else
       48                 split_prereqs = split(string(pre_reqs), ";")
        -             end
       48             for pre_req in split_prereqs
      117                 add_requisite!(course_dict[parse(Int, pre_req)], course_dict[c_ID], pre)
        -             end
        -         end
      103         co_reqs = find_cell(row, Symbol("Corequisites"))
      103         if co_reqs != "" && co_reqs != " " && co_reqs != ' '
       34             if last(co_reqs, 1) == ";" || last(co_reqs, 1) == " "
        0                 co_reqs = co_reqs[1:end-1]
        -             end
        -             # check if co_reqs string contains a comma
       17             if occursin(",", string(co_reqs))
        0                 split_coreqs = split(string(co_reqs), ",")
        -             else
       17                 split_coreqs = split(string(co_reqs), ";")
        -             end
       17             for co_req in split_coreqs
       35                 add_requisite!(course_dict[parse(Int, co_req)], course_dict[c_ID], co)
        -             end
        -         end
      103         sco_reqs = find_cell(row, Symbol("Strict-Corequisites"))
      103         if sco_reqs != "" && sco_reqs != " " && sco_reqs != ' '
       12             if last(sco_reqs) == ";"
        0                 chop(sco_reqs, tail=1)
        -             end
        -             # check if sco_reqs string contains a comma
       12             if occursin(",", string(sco_reqs))
        0                 split_scoreqs = split(string(sco_reqs), ",")
        -             else
       12                 split_scoreqs = split(string(sco_reqs), ";")
        -             end
       12             for sco_req in split_scoreqs
      110                 add_requisite!(course_dict[parse(Int, sco_req)], course_dict[c_ID], strict_co)
        -             end
        -         end
        - 
        -     end
        6     return course_dict
        - end
        - 
        2 function read_courses(df_courses::DataFrame, all_courses::Dict{Int,Course})
        2     course_dict = Dict{Int, Course}()
        3     for row in DataFrames.eachrow(df_courses)
        8         c_ID = row[Symbol("Course ID")]
        7         course_dict[c_ID] = all_courses[c_ID]
        -     end
        2     return course_dict
        - end
        - 
        2 function read_terms(df_courses::DataFrame, course_dict::Dict{Int, Course}, course_arr::Array{Course,1})
        2     terms = Dict{Int, Array{Course}}()
        2     have_term = Course[]
        2     not_have_term = Course[]
        4     for row in DataFrames.eachrow(df_courses)
       22         c_ID = find_cell(row, Symbol("Course ID"))
       22         term_ID = find_cell(row, Symbol("Term"))
       22         for course in course_arr
      157             if course_dict[c_ID].id == course.id                #This could be simplified with logic 
       44                 if typeof(row[Symbol("Term")]) != Missing       #operations rather than four if statemnts
       22                     push!(have_term, course)
       22                     if term_ID in keys(terms)
       15                         push!(terms[term_ID], course) 
        -                     else
       29                         terms[term_ID] = [course]
        -                     end
        -                 else
        0                     push!(not_have_term, course)
        -                 end
      177                 break
        -             end            
        -         end        
        -     end  
        2     terms_arr = Array{Term}(undef, length(terms))
        4     for term in terms
       12         terms_arr[term[1]] = Term([class for class in term[2]])
        -     end
        2     if length(not_have_term) == 0
        2         return terms_arr
        -     else
        0         return terms_arr, have_term, not_have_term
        -     end
        - end
        - 
        0 function generate_course_lo(df_learning_outcomes::DataFrame)
        0     lo_dict = Dict{Int, LearningOutcome}()
        0     for row in DataFrames.eachrow(df_learning_outcomes)
        0         lo_ID = find_cell(row, Symbol("Learning Outcome ID"))
        0         lo_name = find_cell(row, Symbol("Learning Outcome"))
        0         lo_description = find_cell(row, Symbol("Description"))
        0         lo_Credit = find_cell(row, Symbol("Hours"))
        0         if lo_ID in keys(lo_dict)
        0             println("Learning Outcome ID must be unique")
        0             return false
        -         else
        0             lo_dict[lo_ID] = LearningOutcome(lo_name, lo_description, lo_Credit)
        -         end
        -     end
        0     for row in DataFrames.eachrow(df_learning_outcomes)
        0         lo_ID = find_cell(row, Symbol("Learning Outcome ID"))
        0         reqs = find_cell(row, Symbol("Requisites"))
        0         if typeof(reqs) != Missing
        0             for req in req
        -                 # adds all requisite courses for the learning outcome as prerequisites
        0                 add_lo_requisite!(lo_dict[req], lo_dict[lo_ID], pre)
        -             end
        -         end
        -     end
        0     lo_Course = Dict{Int, Array{LearningOutcome}}()
        0     for row in DataFrames.eachrow(df_learning_outcomes)
        0         c_ID = find_cell(row, Symbol("Course ID"))
        0         lo_ID = find_cell(row, Symbol("Learning Outcome ID"))
        0         if c_ID in keys(lo_Course)
        0             push!(lo_Course[c_ID], lo_dict[lo_ID]) 
        -         else
        0             lo_Course[c_ID] = [lo_dict[lo_ID]]
        -         end
        -     end    
        0     return lo_Course
        - end
        - 
        0 function generate_curric_lo(df_curric_lo::DataFrame)
        0     learning_outcomes = LearningOutcome[]
        0     for row in DataFrames.eachrow(df_curric_lo)
        0         lo_name = find_cell(row, Symbol("Learning Outcome"))
        0         lo_description = find_cell(row, Symbol("Description"))
        0         push!(learning_outcomes, LearningOutcome(lo_name, lo_description, 0))
        -     end
        0     return learning_outcomes
        - end
        - 
        - function gather_learning_outcomes(curric::Curriculum)
        -     all_course_lo = Dict{Int,Array{LearningOutcome,1}}()
        -     for course in curric.courses
        -         if length(course.learning_outcomes)>0
        -             all_course_lo[course.id] = course.learning_outcomes
        -         end
        -     end
        -     return all_course_lo
        - end
        - 
        2 function write_learning_outcomes(curric::Curriculum, csv_file, all_course_lo)
        2     if length(all_course_lo) > 0
        0         write(csv_file, "\nCourse Learning Outcomes,,,,,,,,,,") 
        0         write(csv_file, "\nCourse ID,Learning Outcome ID,Learning Outcome,Description,Requisites,Hours,,,,,") 
        0         for lo_arr in all_course_lo
        0             for lo in lo_arr[2]
        0                 course_ID = lo_arr[1]
        0                 lo_ID = lo.id
        0                 lo_name = lo.name
        0                 lo_desc = lo.description
        0                 lo_prereq = "\""
        0                 for requesite in lo.requisites
        0                     lo_prereq = lo_prereq*string(requesite[1]) * ";"
        -                 end
        0                 lo_prereq = chop(lo_prereq)
        0                 if length(lo_prereq) > 0
        0                    lo_prereq = lo_prereq * "\""
        -                 end
        0                 lo_hours = lo.hours
        0                 lo_line = "\n" * string(course_ID) * "," * string(lo_ID) * ",\"" * string(lo_name) * "\",\"" * 
        -                           string(lo_desc) * "\",\"" * string(lo_prereq) * "\"," * string(lo_hours) * ",,,,,"
        0                 write(csv_file, lo_line) 
        -             end
        -         end
        -     end
        2     if length(curric.learning_outcomes) > 0
        0         write(csv_file, "\nCurriculum Learning Outcomes,,,,,,,,,,") 
        0         write(csv_file, "\nLearning Outcome,Description,,,,,,,,,") 
        0         for lo in curric.learning_outcomes
        0             lo_name = lo.name
        0             lo_desc = lo.description
        0             lo_line = "\n\"" * string(lo_name) *"\",\""* string(lo_desc) * "\",,,,,,,,,"
        2             write(csv_file, lo_line) 
        -         end 
        -     end
        - end
