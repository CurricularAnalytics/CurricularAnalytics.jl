        - module Enrollment
        -     using CurricularAnalytics: Student, Course, co, pre, strict_co, custom
        - 
        8     function enroll!(current_term, simulation, max_credits)
        8         student_progress = simulation.student_progress
        - 
        8         terms = simulation.degree_plan.terms
        8         courses = simulation.degree_plan.curriculum.courses
        - 
        8         for (termnum, term) in enumerate(terms)
        -             # Iterate through courses
       32             for course in term.courses
        -                 # Clear the array of enrolled students for the course
       64                 course.metadata["students"] = Student[]
        - 
       64                 for student in simulation.enrolled_students
        -                     
        -                     # Get the coreqs of the the course
      640                     strict_coreq_ids = [k for (k, v) in course.requisites if v == strict_co]
        - 
        -                     # Enroll in strictCoreqs first
      640                     for strict_coreq_id in strict_coreq_ids
        0                         strict_coreq = get_course_by_id(courses, strict_coreq_id)
        - 
        0                         if canEnroll(student, strict_coreq, courses, student_progress, max_credits, current_term)
        -                             # Enroll the student in the course
        0                             push!(strict_coreq.metadata["students"], student)
        - 
        -                             # Increment the course's enrollment counters
        0                             strict_coreq.metadata["enrolled"] += 1
        0                             strict_coreq.metadata["termenrollment"][current_term] += 1
        - 
        -                             # Increse the student's term credits
        0                             student.termcredits += strict_coreq.credit_hours
        -                         end
        -                     end
        - 
        -                     # Get the coreqs of the the course
      640                     coreq_ids = [k for (k, v) in course.requisites if v == co]
        - 
        -                     # Enroll in coreqs
      640                     for coreqId in coreq_ids
       80                         coreq = get_course_by_id(courses, coreqId)
        - 
       80                         if canEnroll(student, coreq, courses, student_progress, max_credits, current_term)
        -                             # Enroll the student in the course
       10                             push!(coreq.metadata["students"], student)
        - 
        -                             # Increment the course's enrollment counters
       10                             coreq.metadata["enrolled"] += 1
       10                             coreq.metadata["termenrollment"][current_term] += 1
        - 
        -                             # Increse the student's term credits
       10                             student.termcredits += coreq.credit_hours
        -                         end
        -                     end
        - 
        - 
        - 
        -                     # Determine wheter the student can be enrolled in the current course.
      640                     if canEnroll(student, course, courses, student_progress, max_credits, current_term)
        - 
        -                         # Enroll the student in the course
      160                         push!(course.metadata["students"], student)
        - 
        -                         # Increment the course's enrollment counters
      160                         course.metadata["enrolled"] += 1
      160                         course.metadata["termenrollment"][current_term] += 1
        - 
        -                         # Increse the student's term credits
      160                         student.termcredits += course.credit_hours
        -                     end
        -                 end
        -             end
        -         end
        -     end
        - 
        -     # Function that determines wheter a student can enroll in a course
      720     function canEnroll(student, course, courses, student_progress, max_credits, term)
        -         # Find the prereq ids of the current course
      720         prereqs = get_reqs(courses, course, pre)
     1040         prereq_ids = map(x -> x.metadata["id"], prereqs)
        - 
        -         # Stuent is enrolled already
      720         if in(student, course.metadata["students"])
       10             return false
        -         end
        - 
        -          # Student needs to complete prereqs
      710         if (length(prereq_ids) != 0 && sum(student_progress[student.id, prereq_ids]) != length(prereq_ids))
      170             return false
        -         end
        - 
        -         # The student has completed the course
     1080         if student_progress[student.id, course.metadata["id"]] != 0.0
      130             return false
        -         end
        - 
        -         # The student will exceed the maximum number of credit hours
      410         if student.termcredits + course.credit_hours > max_credits
      240             return false
        -         end
        - 
        -         # The student must wait until the term req has been met
      170         if course.metadata["term_req"] > term
        0             return false
        -         end
        - 
        -         # The student isn't enrolled in or hasn't completed coreqs
      170         if !enrolled_in_coreqs(student, course, courses, student_progress)
        0             return false
        -         end
        - 
      170         return true
        -     end
        - 
        -     # Determines whether a student is enrolled in or has completed coreqs for a given course
      170     function enrolled_in_coreqs(student, course, courses, student_progress)
      170         enrolled = true
        - 
      170         coreqs = get_reqs(courses, course, strict_co)
        - 
      340         for coreq in coreqs
        0             enrolled =  enrolled && (in(student, course.metadata["students"]) || student_progress[student.id, coreq.metadata["id"]] == 1.0)
        -         end
        - 
      170         return enrolled
        -     end
        -     
        -     # Get reqs of a given course
      890     function get_reqs(courses, target_course, req)
      890         reqs = Course[]
      890         req_ids = []
        - 
      890         req_ids = [k for (k, v) in target_course.requisites if v == req]
        - 
     1540         for req_id in req_ids
      320             course = get_course_by_id(courses, req_id)
      320             if course !== nothing
      560                 push!(reqs, course)
        -             end
        -         end
      890         return reqs
        -     end
        - 
        -     # Find the course based on given id
      400     function get_course_by_id(courses, id)
      400         for course in courses
     2560             if course.id == id
      400                 return course
        -             end
        -         end
        0         return nothing
        -     end
        - end
